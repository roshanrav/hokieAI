{"ast":null,"code":"var _jsxFileName = \"/Users/roshanravindran/Downloads/MERN_Login_App_with_ResetEmail-Main/client/src/components/ChatPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport homeIcon from '../assets/home.png';\nimport dalleBot from '../assets/dalle_bot.jpg';\nimport sendButton from '../assets/send_button.png';\nimport styles from '../styles/ChatPage.module.css';\nimport user from '../assets/vt_student.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatPage = () => {\n  _s();\n  const {\n    category\n  } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    prompt\n  } = location.state || {};\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [quest, setQuest] = useState('');\n  useEffect(() => {\n    const loadingElement = document.getElementById('loading');\n    setTimeout(() => {\n      if (loadingElement) loadingElement.style.display = 'none';\n    }, 1500);\n    if (prompt) {\n      initialChatGPT(prompt);\n    }\n  }, [prompt]);\n  const handleHomeClick = () => {\n    showLoading();\n    setTimeout(() => {\n      navigate('/chatbot');\n    }, 1500);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (input.trim() === \"\") {\n      return;\n    }\n    handleSum();\n\n    // const newMessage = { role: 'user', content: input };\n    // setMessages([...messages, newMessage]);\n    // setInput('');\n\n    // await handleChatGPT(input);\n  };\n\n  const handleChatGPT = async message => {\n    const newMessage = {\n      role: 'assistant',\n      content: 'Loading...'\n    };\n    setMessages([...messages, newMessage]);\n    setIsLoading(true);\n    const response = await sendMessageToChatGPT(message);\n    setMessages(prevMessages => {\n      const updatedMessages = [...prevMessages];\n      updatedMessages[updatedMessages.length - 1].content = response;\n      return updatedMessages;\n    });\n    setIsLoading(false);\n  };\n  const initialChatGPT = async initialPrompt => {\n    setQuest(initialPrompt);\n    setMessages([{\n      role: 'assistant',\n      content: 'Loading...'\n    }]);\n    const response = await InitialMessageToChatGPT(initialPrompt);\n    setMessages([{\n      role: 'assistant',\n      content: response\n    }]);\n  };\n\n  // API call to send a message to ChatGPT\n  const sendMessageToChatGPT = async prompt => {\n    // Simulate an API call\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(`Response to: ${prompt}`);\n      }, 1000);\n    });\n  };\n\n  // Initial API call to ChatGPT\n  const InitialMessageToChatGPT = async prompt => {\n    // Simulate an API call\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(`Initial response to: ${prompt}`);\n      }, 1000);\n    });\n  };\n  const chatbotMapping = {\n    'Social': 'socialLife',\n    'Academia': 'academia',\n    'Wellness': 'wellness',\n    'tutor': 'tutor'\n  };\n  const getChatbotFromPrompt = urlPrompt => {\n    for (const key in chatbotMapping) {\n      if (urlPrompt.includes(key)) {\n        return chatbotMapping[key];\n      }\n    }\n    return null;\n  };\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const currentChatbot = getChatbotFromPrompt(String(urlParams));\n    const selector = document.getElementById(styles.categorySelector);\n    if (currentChatbot) {\n      selector.value = currentChatbot;\n    } else {\n      selector.selectedIndex = 0;\n    }\n    const prompt_url = urlParams.get('prompt');\n    if (prompt_url) {\n      setQuest(prompt_url);\n    }\n  }, []);\n  const generateUniqueId = () => {\n    const timestamp = Date.now();\n    const randomNumber = Math.random();\n    const hexadecimalString = randomNumber.toString(16);\n    return `id-${timestamp}-${hexadecimalString}`;\n  };\n  const chatStripe = (ai_bool, value, uniqueId) => {\n    return `\n      <div class=\"wrapper ${ai_bool ? styles.ai : ''}\">\n        <div class=\"chat\">\n          <div class=\"profile\">\n            <img\n              src=\"${ai_bool ? dalleBot : user}\"\n              alt=\"${ai_bool ? \"bot\" : \"user\"}\"\n            />\n          </div>\n          <div class=\"message\" id=${uniqueId}>${value}</div>\n        </div>\n      </div>\n    `;\n  };\n  const loader = element => {\n    element.textContent = \"\";\n    loadInterval = setInterval(() => {\n      element.textContent += \".\";\n      if (element.textContent === \"....\") {\n        element.textContent = \"\";\n      }\n    }, 300);\n  };\n  const typeText = (element, text, callback) => {\n    let index = 0;\n    let interval = setInterval(() => {\n      if (index < text.length) {\n        element.innerHTML += text.charAt(index);\n        document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n        ++index;\n      } else {\n        clearInterval(interval);\n        if (callback) callback();\n      }\n    }, 20);\n  };\n  const handleSum = async e => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    const prompt = data.get(\"prompt\").trim();\n    if (prompt === \"\") {\n      e.target.reset();\n      return;\n    }\n    const newMessage = {\n      role: 'user',\n      content: prompt\n    };\n    setMessages([...messages, newMessage]);\n    e.target.reset();\n    const uniqueId = generateUniqueId();\n    setMessages(prevMessages => [...prevMessages, {\n      role: 'assistant',\n      content: \"Loading...\",\n      id: uniqueId\n    }]);\n    const messageDiv = document.getElementById(uniqueId);\n    loader(messageDiv);\n    try {\n      const chatGPTResponse = await sendMessageToChatGPT(prompt);\n      clearInterval(loadInterval);\n      messageDiv.innerHTML = \"\";\n      if (chatGPTResponse.choices && chatGPTResponse.choices.length > 0) {\n        const replyText = chatGPTResponse.choices[0].message.content;\n        typeText(messageDiv, replyText, () => {\n          if (replyText.toLowerCase().includes(\"help\")) {\n            const yesButton = document.createElement(\"button\");\n            yesButton.className = \"yes-button\";\n            yesButton.textContent = \"Yes\";\n            const noButton = document.createElement(\"button\");\n            noButton.className = \"no-button\";\n            noButton.textContent = \"No\";\n            const buttonContainer = document.createElement(\"div\");\n            buttonContainer.id = \"button-container\";\n            buttonContainer.appendChild(yesButton);\n            buttonContainer.appendChild(noButton);\n            document.querySelector(`.${styles.chatContainer}`).appendChild(buttonContainer);\n            document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n            noButton.addEventListener(\"click\", () => {\n              document.querySelector(`.${styles.chatContainer}`).innerHTML += chatStripe(false, \"No\", uniqueId);\n              document.querySelector(`.${styles.chatContainer}`).innerHTML += chatStripe(true, \"Thank you! Please let me know if you have more questions.\", uniqueId);\n              document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n              document.getElementById(\"button-container\").remove();\n            });\n            yesButton.addEventListener(\"click\", () => {\n              document.querySelector(`.${styles.chatContainer}`).innerHTML += chatStripe(false, \"Yes\", uniqueId);\n              const responseDiv = document.createElement(\"div\");\n              responseDiv.id = \"bot-message\";\n              document.querySelector(`.${styles.chatContainer}`).innerHTML += chatStripe(true, \"Would you like to email the advisor or continue the conversation?\", uniqueId);\n              const emailButton = document.createElement(\"button\");\n              emailButton.className = \"response-button\";\n              emailButton.textContent = \"Email Advisor\";\n              const askMindcraftButton = document.createElement(\"button\");\n              askMindcraftButton.className = \"response-button\";\n              askMindcraftButton.textContent = \"Continue Chat\";\n              document.getElementById(\"button-container\").remove();\n              responseDiv.appendChild(document.createElement(\"br\"));\n              responseDiv.appendChild(emailButton);\n              responseDiv.appendChild(askMindcraftButton);\n              document.querySelector(`.${styles.chatContainer}`).appendChild(responseDiv);\n              document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n              buttonContainer.remove();\n              emailButton.addEventListener(\"click\", async () => {\n                document.querySelector(`.${styles.chatContainer}`).innerHTML += chatStripe(false, \"Yes, Please help me email my advisor\", uniqueId);\n                const emailPrompt = generateEmailPrompt(messageHistory);\n                const response = await fetch('https://api.openai.com/v1/chat/completions', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer YOUR_API_KEY'\n                  },\n                  body: JSON.stringify({\n                    model: \"gpt-3.5-turbo\",\n                    messages: [{\n                      role: \"user\",\n                      content: emailPrompt\n                    }]\n                  })\n                });\n                const emailResponse = await response.json();\n                const emailContent = emailResponse.choices[0].message.content;\n                const subjectMatch = emailContent.match(/Subject: (.*)\\n/);\n                const subject = subjectMatch ? subjectMatch[1] : \"Inquiry\";\n                const body = emailContent.replace(/Subject: .*?\\n/, \"\");\n                const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n                window.location.href = mailtoLink;\n                document.getElementById(\"bot-message\").remove();\n                document.querySelector(`.${styles.chatContainer}`).innerHTML += chatStripe(true, \"Hope I answered your question. Please let me know if you have more questions\", uniqueId);\n              });\n              askMindcraftButton.addEventListener(\"click\", () => {\n                const askMindcraftMessageDiv = document.createElement(\"div\");\n                document.querySelector(`.${styles.chatContainer}`).innerHTML += chatStripe(false, \"Continue chat\", uniqueId);\n                askMindcraftMessageDiv.className = \"bot-message\";\n                document.querySelector(`.${styles.chatContainer}`).innerHTML += chatStripe(true, \"Please provide more details or ask another question.\", uniqueId);\n                document.querySelector(`.${styles.chatContainer}`).appendChild(askMindcraftMessageDiv);\n                document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n                document.getElementById(\"bot-message\").remove();\n              });\n            });\n          }\n        });\n      } else {\n        messageDiv.innerHTML = \"Failed to get a response\";\n      }\n    } catch (error) {\n      clearInterval(loadInterval);\n      messageDiv.innerHTML = \"Error: \" + error.toString();\n      console.error(\"Error when calling OpenAI:\", error);\n    }\n  };\n  const generateEmailPrompt = conversationHistory => {\n    return `\n      You are a helpful assistant. Based on the following conversation history, generate a detailed and polite email for a Virginia Tech advisor. The email should be written from the perspective of a Virginia Tech student asking for more information or assistance based on their enquiry.\n\n      Conversation History: ${conversationHistory.map(message => {\n      return `\\n${message.role === 'user' ? 'User' : 'Assistant'}: ${message.content}`;\n    }).join('')}\n\n      The name of the student is Roshan Ravindran.\n\n      Please ensure the email includes:\n      - A formal greeting.\n      - A clear and detailed description of the student's enquiry.\n      - Relevant details or context that the student has provided.\n      - A polite closing statement thanking the advisor for their time and asking for more detailed information or assistance.\n      - Keep it short and professional\n\n      The email should be structured formally and professionally, appropriate for a university setting.\n    `;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chatPage,\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"loading\",\n        style: {\n          position: 'fixed',\n          width: '100%',\n          height: '100%',\n          top: 0,\n          left: 0,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          background: '#861F41',\n          zIndex: 1000\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: dalleBot,\n          id: styles.loadingImage,\n          alt: \"loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: styles.app,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: styles.header,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            id: styles.homeButton,\n            onClick: handleHomeClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: homeIcon,\n              alt: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            id: styles.chatHeader,\n            children: \"MindCraft VT Chatbot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: styles.categorySelector,\n            defaultValue: category,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"socialLife\",\n              children: \"Social Life\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"academia\",\n              children: \"Academia\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"wellness\",\n              children: \"Wellness\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"tutor\",\n              children: \"Tutor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: styles.chatContainer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            name: \"prompt\",\n            required: true,\n            rows: \"1\",\n            cols: \"1\",\n            placeholder: \"Ask MindCraft VT...\",\n            value: input,\n            onChange: e => setInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            id: styles.submitButton,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: sendButton,\n              alt: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 325,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatPage, \"mCkXVUZWQ6kctf6wZ/WCnjXHj5Y=\", false, function () {\n  return [useParams, useLocation, useNavigate];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useNavigate","useParams","homeIcon","dalleBot","sendButton","styles","user","ChatPage","category","location","navigate","prompt","state","input","setInput","messages","setMessages","isLoading","setIsLoading","quest","setQuest","loadingElement","document","getElementById","setTimeout","style","display","initialChatGPT","handleHomeClick","showLoading","handleSubmit","e","preventDefault","trim","handleSum","handleChatGPT","message","newMessage","role","content","response","sendMessageToChatGPT","prevMessages","updatedMessages","length","initialPrompt","InitialMessageToChatGPT","Promise","resolve","chatbotMapping","getChatbotFromPrompt","urlPrompt","key","includes","urlParams","URLSearchParams","window","search","currentChatbot","String","selector","categorySelector","value","selectedIndex","prompt_url","get","generateUniqueId","timestamp","Date","now","randomNumber","Math","random","hexadecimalString","toString","chatStripe","ai_bool","uniqueId","ai","loader","element","textContent","loadInterval","setInterval","typeText","text","callback","index","interval","innerHTML","charAt","querySelector","chatContainer","scrollTop","scrollHeight","clearInterval","data","FormData","target","reset","id","messageDiv","chatGPTResponse","choices","replyText","toLowerCase","yesButton","createElement","className","noButton","buttonContainer","appendChild","addEventListener","remove","responseDiv","emailButton","askMindcraftButton","emailPrompt","generateEmailPrompt","messageHistory","fetch","method","headers","body","JSON","stringify","model","emailResponse","json","emailContent","subjectMatch","match","subject","replace","mailtoLink","encodeURIComponent","href","askMindcraftMessageDiv","error","console","conversationHistory","map","join","chatPage","position","width","height","top","left","justifyContent","alignItems","background","zIndex","loadingImage","app","header","homeButton","chatHeader","submitButton"],"sources":["/Users/roshanravindran/Downloads/MERN_Login_App_with_ResetEmail-Main/client/src/components/ChatPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport homeIcon from '../assets/home.png';\nimport dalleBot from '../assets/dalle_bot.jpg';\nimport sendButton from '../assets/send_button.png';\nimport styles from '../styles/ChatPage.module.css';\nimport user from '../assets/vt_student.jpg';\n\n\nconst ChatPage = () => {\n    const { category } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { prompt } = location.state || {};\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [quest, setQuest] = useState('');\n\n  useEffect(() => {\n    const loadingElement = document.getElementById('loading');\n    setTimeout(() => {\n      if (loadingElement) loadingElement.style.display = 'none';\n    }, 1500);\n\n    if (prompt) {\n      initialChatGPT(prompt);\n    }\n  }, [prompt]);\n\n  const handleHomeClick = () => {\n    showLoading();\n    setTimeout(() => {\n      navigate('/chatbot');\n    }, 1500);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (input.trim() === \"\") {\n      return;\n    }\n    handleSum()\n\n    // const newMessage = { role: 'user', content: input };\n    // setMessages([...messages, newMessage]);\n    // setInput('');\n\n    // await handleChatGPT(input);\n  };\n\n  const handleChatGPT = async (message) => {\n    const newMessage = { role: 'assistant', content: 'Loading...' };\n    setMessages([...messages, newMessage]);\n    setIsLoading(true);\n\n    const response = await sendMessageToChatGPT(message);\n\n    setMessages((prevMessages) => {\n      const updatedMessages = [...prevMessages];\n      updatedMessages[updatedMessages.length - 1].content = response;\n      return updatedMessages;\n    });\n\n    setIsLoading(false);\n  };\n\n  const initialChatGPT = async (initialPrompt) => {\n    setQuest(initialPrompt);\n    setMessages([{ role: 'assistant', content: 'Loading...' }]);\n    const response = await InitialMessageToChatGPT(initialPrompt);\n    setMessages([{ role: 'assistant', content: response }]);\n  };\n\n  // API call to send a message to ChatGPT\n  const sendMessageToChatGPT = async (prompt) => {\n    // Simulate an API call\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(`Response to: ${prompt}`);\n      }, 1000);\n    });\n  };\n\n  // Initial API call to ChatGPT\n  const InitialMessageToChatGPT = async (prompt) => {\n    // Simulate an API call\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(`Initial response to: ${prompt}`);\n      }, 1000);\n    });\n  };\n\n  const chatbotMapping = {\n    'Social': 'socialLife',\n    'Academia': 'academia',\n    'Wellness': 'wellness',\n    'tutor': 'tutor'\n  };\n\n  const getChatbotFromPrompt = (urlPrompt) => {\n    for (const key in chatbotMapping) {\n      if (urlPrompt.includes(key)) {\n        return chatbotMapping[key];\n      }\n    }\n    return null;\n  };\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const currentChatbot = getChatbotFromPrompt(String(urlParams));\n    const selector = document.getElementById(styles.categorySelector);\n\n    if (currentChatbot) {\n      selector.value = currentChatbot;\n    } else {\n      selector.selectedIndex = 0;\n    }\n\n    const prompt_url = urlParams.get('prompt');\n    if (prompt_url) {\n      setQuest(prompt_url);\n    }\n  }, []);\n\n  const generateUniqueId = () => {\n    const timestamp = Date.now();\n    const randomNumber = Math.random();\n    const hexadecimalString = randomNumber.toString(16);\n\n    return `id-${timestamp}-${hexadecimalString}`;\n  };\n\n  const chatStripe = (ai_bool, value, uniqueId) => {\n    return `\n      <div class=\"wrapper ${ai_bool ? styles.ai : ''}\">\n        <div class=\"chat\">\n          <div class=\"profile\">\n            <img\n              src=\"${ai_bool ? dalleBot : user}\"\n              alt=\"${ai_bool ? \"bot\" : \"user\"}\"\n            />\n          </div>\n          <div class=\"message\" id=${uniqueId}>${value}</div>\n        </div>\n      </div>\n    `;\n  };\n\n  const loader = (element) => {\n    element.textContent = \"\";\n    loadInterval = setInterval(() => {\n      element.textContent += \".\";\n      if (element.textContent === \"....\") {\n        element.textContent = \"\";\n      }\n    }, 300);\n  };\n\n  const typeText = (element, text, callback) => {\n    let index = 0;\n    let interval = setInterval(() => {\n      if (index < text.length) {\n        element.innerHTML += text.charAt(index);\n        document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n        ++index;\n      } else {\n        clearInterval(interval);\n        if (callback) callback();\n      }\n    }, 20);\n  };\n\n  const handleSum = async (e) => {\n    e.preventDefault();\n    const data = new FormData(e.target);\n    const prompt = data.get(\"prompt\").trim();\n\n    if (prompt === \"\") {\n      e.target.reset();\n      return;\n    }\n\n    const newMessage = { role: 'user', content: prompt };\n    setMessages([...messages, newMessage]);\n\n    e.target.reset();\n\n    const uniqueId = generateUniqueId();\n    setMessages((prevMessages) => [...prevMessages, { role: 'assistant', content: \"Loading...\", id: uniqueId }]);\n\n    const messageDiv = document.getElementById(uniqueId);\n    loader(messageDiv);\n\n    try {\n      const chatGPTResponse = await sendMessageToChatGPT(prompt);\n\n      clearInterval(loadInterval);\n      messageDiv.innerHTML = \"\";\n\n      if (chatGPTResponse.choices && chatGPTResponse.choices.length > 0) {\n        const replyText = chatGPTResponse.choices[0].message.content;\n        typeText(messageDiv, replyText, () => {\n          if (replyText.toLowerCase().includes(\"help\")) {\n            const yesButton = document.createElement(\"button\");\n            yesButton.className = \"yes-button\";\n            yesButton.textContent = \"Yes\";\n            const noButton = document.createElement(\"button\");\n            noButton.className = \"no-button\";\n            noButton.textContent = \"No\";\n\n            const buttonContainer = document.createElement(\"div\");\n            buttonContainer.id = \"button-container\";\n            buttonContainer.appendChild(yesButton);\n            buttonContainer.appendChild(noButton);\n            document.querySelector(`.${styles.chatContainer}`).appendChild(buttonContainer);\n\n            document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n\n            noButton.addEventListener(\"click\", () => {\n              document.querySelector(`.${styles.chatContainer}`).innerHTML += chatStripe(false, \"No\", uniqueId);\n              document.querySelector(`.${styles.chatContainer}`).innerHTML += chatStripe(true, \"Thank you! Please let me know if you have more questions.\", uniqueId);\n              document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n              document.getElementById(\"button-container\").remove();\n            });\n\n            yesButton.addEventListener(\"click\", () => {\n              document.querySelector(`.${styles.chatContainer}`).innerHTML += chatStripe(false, \"Yes\", uniqueId);\n              const responseDiv = document.createElement(\"div\");\n              responseDiv.id = \"bot-message\";\n              document.querySelector(`.${styles.chatContainer}`).innerHTML += chatStripe(true, \"Would you like to email the advisor or continue the conversation?\", uniqueId);\n\n              const emailButton = document.createElement(\"button\");\n              emailButton.className = \"response-button\";\n              emailButton.textContent = \"Email Advisor\";\n              const askMindcraftButton = document.createElement(\"button\");\n              askMindcraftButton.className = \"response-button\";\n              askMindcraftButton.textContent = \"Continue Chat\";\n              document.getElementById(\"button-container\").remove();\n\n              responseDiv.appendChild(document.createElement(\"br\"));\n              responseDiv.appendChild(emailButton);\n              responseDiv.appendChild(askMindcraftButton);\n\n              document.querySelector(`.${styles.chatContainer}`).appendChild(responseDiv);\n              document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n              buttonContainer.remove();\n\n              emailButton.addEventListener(\"click\", async () => {\n                document.querySelector(`.${styles.chatContainer}`).innerHTML += chatStripe(false, \"Yes, Please help me email my advisor\", uniqueId);\n\n                const emailPrompt = generateEmailPrompt(messageHistory);\n                const response = await fetch('https://api.openai.com/v1/chat/completions', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer YOUR_API_KEY'\n                  },\n                  body: JSON.stringify({\n                    model: \"gpt-3.5-turbo\",\n                    messages: [{ role: \"user\", content: emailPrompt }]\n                  })\n                });\n                const emailResponse = await response.json();\n                const emailContent = emailResponse.choices[0].message.content;\n\n                const subjectMatch = emailContent.match(/Subject: (.*)\\n/);\n                const subject = subjectMatch ? subjectMatch[1] : \"Inquiry\";\n                const body = emailContent.replace(/Subject: .*?\\n/, \"\");\n\n                const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n                window.location.href = mailtoLink;\n\n                document.getElementById(\"bot-message\").remove();\n                document.querySelector(`.${styles.chatContainer}`).innerHTML += chatStripe(true, \"Hope I answered your question. Please let me know if you have more questions\", uniqueId);\n              });\n\n              askMindcraftButton.addEventListener(\"click\", () => {\n                const askMindcraftMessageDiv = document.createElement(\"div\");\n                document.querySelector(`.${styles.chatContainer}`).innerHTML += chatStripe(false, \"Continue chat\", uniqueId);\n                askMindcraftMessageDiv.className = \"bot-message\";\n                document.querySelector(`.${styles.chatContainer}`).innerHTML += chatStripe(true, \"Please provide more details or ask another question.\", uniqueId);\n                document.querySelector(`.${styles.chatContainer}`).appendChild(askMindcraftMessageDiv);\n                document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n                document.getElementById(\"bot-message\").remove();\n              });\n            });\n          }\n        });\n      } else {\n        messageDiv.innerHTML = \"Failed to get a response\";\n      }\n    } catch (error) {\n      clearInterval(loadInterval);\n      messageDiv.innerHTML = \"Error: \" + error.toString();\n      console.error(\"Error when calling OpenAI:\", error);\n    }\n  };\n\n  const generateEmailPrompt = (conversationHistory) => {\n    return `\n      You are a helpful assistant. Based on the following conversation history, generate a detailed and polite email for a Virginia Tech advisor. The email should be written from the perspective of a Virginia Tech student asking for more information or assistance based on their enquiry.\n\n      Conversation History: ${conversationHistory.map(message => {\n        return `\\n${message.role === 'user' ? 'User' : 'Assistant'}: ${message.content}`;\n      }).join('')}\n\n      The name of the student is Roshan Ravindran.\n\n      Please ensure the email includes:\n      - A formal greeting.\n      - A clear and detailed description of the student's enquiry.\n      - Relevant details or context that the student has provided.\n      - A polite closing statement thanking the advisor for their time and asking for more detailed information or assistance.\n      - Keep it short and professional\n\n      The email should be structured formally and professionally, appropriate for a university setting.\n    `;\n  };\n\n\n  return (\n    <div className={styles.chatPage}> {/* Apply the scoped class */}\n    <div>\n      <div\n        id=\"loading\"\n        style={{\n          position: 'fixed',\n          width: '100%',\n          height: '100%',\n          top: 0,\n          left: 0,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          background: '#861F41',\n          zIndex: 1000,\n        }}\n      >\n        <img src={dalleBot} id={styles.loadingImage} alt=\"loading\" />\n      </div>\n      <div id={styles.app}>\n        <div id={styles.header}>\n          <button id={styles.homeButton} onClick={handleHomeClick}>\n            <img src={homeIcon} alt=\"Home\" />\n          </button>\n          <h1 id={styles.chatHeader}>MindCraft VT Chatbot</h1>\n          <select id={styles.categorySelector} defaultValue={category}>\n            <option value=\"socialLife\">Social Life</option>\n            <option value=\"academia\">Academia</option>\n            <option value=\"wellness\">Wellness</option>\n            <option value=\"tutor\">Tutor</option>\n          </select>\n        </div>\n        <div id={styles.chatContainer}>\n          {/* Render chat messages here */}\n        </div>\n        <form onSubmit={handleSubmit}>\n          <textarea\n            name=\"prompt\"\n            required\n            rows=\"1\"\n            cols=\"1\"\n            placeholder=\"Ask MindCraft VT...\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n          ></textarea>\n          <button type=\"submit\" id={styles.submitButton}>\n            <img src={sendButton} alt=\"Send\" />\n          </button>\n        </form>\n      </div>\n    </div>\n    </div>\n  );\n};\n\nexport default ChatPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}