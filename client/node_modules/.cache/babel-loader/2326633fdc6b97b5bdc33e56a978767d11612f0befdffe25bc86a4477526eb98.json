{"ast":null,"code":"var _jsxFileName = \"/Users/roshanravindran/Downloads/MERN_Login_App_with_ResetEmail-Main/client/src/components/ChatPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport homeIcon from '../assets/home.png';\nimport dalleBot from '../assets/dalle_bot.jpg';\nimport sendButton from '../assets/send_button.png';\nimport styles from '../styles/ChatPage.module.css';\nimport user from '../assets/vt_student.jpg';\n\n// const ChatPage = () => {\n//     const chatContainer = document.querySelector(`.${styles.chatContainer}`);\n\n//   const { category } = useParams();\n//   const form = document.querySelector(\"form\"); \n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const { prompt } = location.state || {};\n//   const [input, setInput] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [messageHistory, setMessageHistory] = useState([]);\n//   const [quest, setQuest] = useState('');\n//   const studentName = \"Roshan Ravindran\";\n\n//   useEffect(() => {   const loadingElement = document.getElementById('loading');\n//     setTimeout(() => {\n//       if (loadingElement) loadingElement.style.display = 'none';\n//     }, 1500);\n\n//     if (prompt) {\n//       initialChatGPT(prompt);\n//       console.log(\"the prompt is\" + prompt)\n//     }\n//   }, [prompt]);\n\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const currentChatbot = getChatbotFromPrompt(String(urlParams));\n//     const selector = document.getElementById('category-selector');\n\n//     if (selector) {\n//       if (currentChatbot) {\n//         selector.value = currentChatbot;\n//       } else {\n//         selector.selectedIndex = 0;\n//       }\n//     }\n\n//     const prompt_url = urlParams.get('prompt');\n//     if (prompt_url) {\n//       setQuest(prompt_url);\n//     }\n//   }, []);\n\n//   const handleHomeClick = () => {\n//     showLoading();\n//     setTimeout(() => {\n//       navigate('/chatbot');\n//     }, 1500);\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (input.trim() === \"\") {\n//       return;\n//     }\n\n//     const newMessage = { role: 'user', content: input };\n//     setMessages([...messages, newMessage]);\n//     setMessageHistory([...messageHistory, newMessage]);\n//     setInput('');\n\n//     await handleChatGPT(input);\n//   };\n\n//   const handleChatGPT = async (message) => {\n//     const uniqueId = generateUniqueId();\n//     const newMessage = { role: 'assistant', content: 'Loading...', id: uniqueId };\n//     setMessages((prevMessages) => [...prevMessages, newMessage]);\n\n//     const response = await sendMessageToChatGPT(messageHistory.concat([{ role: 'user', content: message }]));\n\n//     setMessages((prevMessages) => {\n//       const updatedMessages = [...prevMessages];\n//       const index = updatedMessages.findIndex(msg => msg.id === uniqueId);\n//       if (index !== -1) {\n//         updatedMessages[index].content = '';\n//         typeText(document.getElementById(uniqueId), response, () => handleYesNoButtons(response, uniqueId));\n//       }\n//       return updatedMessages;\n//     });\n\n//     setMessageHistory((prevHistory) => [...prevHistory, { role: 'assistant', content: response }]);\n//   };\n\n//   const initialChatGPT = async (initialPrompt) => {\n//     setQuest(initialPrompt);\n//     // setMessages([{ role: 'assistant', content: 'Loading...' }]);\n//     form.reset();\n\n//   // bot's chatstripe, initially blank\n//     const uniqueId = generateUniqueId();\n//     chatContainer.innerHTML += chatStripe(true, \" \", uniqueId);\n\n//     chatContainer.scrollTop = chatContainer.scrollHeight;\n\n//     const messageDiv = document.getElementById(uniqueId);\n//     loader(messageDiv);\n//     const response = await InitialMessageToChatGPT(initialPrompt);\n//     setMessages([{ role: 'assistant', content: response }]);\n//     setMessageHistory([{ role: 'assistant', content: response }]);\n//   };\n\n//   const sendMessageToChatGPT = async (promptMessages) => {\n//     const response = await fetch('https://api.openai.com/v1/chat/completions', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': 'Bearer sk-proj-Ujro97vuIFi0BvhkpHnET3BlbkFJ2eiNRzcGGHMHfman9iiE'\n//       },\n//       body: JSON.stringify({\n//         model: \"gpt-3.5-turbo\",\n//         messages: promptMessages\n//       })\n//     });\n//     const data = await response.json();\n//     if (data.choices && data.choices.length > 0) {\n//       const replyText = data.choices[0].message.content;\n//       return replyText;\n//     } else {\n//       return \"Failed to get a response\";\n//     }\n//   };\n\n//   const InitialMessageToChatGPT = async (quest) => {\n//     messageHistory = [];\n//     const initialPrompt = quest;\n//     messageHistory.push({ role: \"system\", content: initialPrompt });\n//   console.log(messageHistory)\n//     const response = await fetch('https://api.openai.com/v1/chat/completions', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': 'Bearer sk-proj-ClyheMv50nSvIf1Q3g84T3BlbkFJoZ6isdGyOQEQcCm8GlzN'\n//       },\n//       body: JSON.stringify({\n//         model: \"gpt-3.5-turbo\",\n//         messages: [{ role: \"system\", content: quest }]\n//       })\n//     });\n//     const data = await response.json();\n//   if (data.choices && data.choices.length > 0) {\n//     const replyText = data.choices[0].message.content;\n//     const uniqueId = generateUniqueId();\n//     chatContainer.innerHTML += chatStripe(true, replyText, uniqueId);\n//     messageHistory.push({ role: \"assistant\", content: replyText });\n//   } else {\n//     console.error(\"Failed to get a valid response from the API.\");\n//     chatContainer.innerHTML += `<div>Error: Failed to get a response from the assistant.</div>`;\n//   }\n//   return data;\n//   };\n\n//   const chatbotMapping = {\n//     'Social': 'socialLife',\n//     'Academia': 'academia',\n//     'Wellness': 'wellness',\n//     'tutor': 'tutor'\n//   };\n\n//   const getChatbotFromPrompt = (urlPrompt) => {\n//     for (const key in chatbotMapping) {\n//       if (urlPrompt.includes(key)) {\n//         return chatbotMapping[key];\n//       }\n//     }\n//     return null;\n//   };\n\n//   const generateUniqueId = () => {\n//     const timestamp = Date.now();\n//     const randomNumber = Math.random();\n//     const hexadecimalString = randomNumber.toString(16);\n\n//     return `id-${timestamp}-${hexadecimalString}`;\n//   };\n\n//   const chatStripe = (ai_bool, value, uniqueId) => {\n//     return `\n//       <div class=\"wrapper ${ai_bool ? styles.ai : ''}\">\n//         <div class=\"chat\">\n//           <div class=\"profile\">\n//             <img\n//               src=\"${ai_bool ? dalleBot : user}\"\n//               alt=\"${ai_bool ? \"bot\" : \"user\"}\"\n//             />\n//           </div>\n//           <div class=\"message\" id=${uniqueId}>${value}</div>\n//         </div>\n//       </div>\n//     `;\n//   };\n\n//   const loader = (element) => {\n//     element.textContent = \"\";\n//     let loadInterval = setInterval(() => {\n//       element.textContent += \".\";\n//       if (element.textContent === \"....\") {\n//         element.textContent = \"\";\n//       }\n//     }, 300);\n//   };\n\n//   const typeText = (element, text, callback) => {\n//     let index = 0;\n//     let interval = setInterval(() => {\n//       if (index < text.length) {\n//         element.innerHTML += text.charAt(index);\n//         document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n//         ++index;\n//       } else {\n//         clearInterval(interval);\n//         if (callback) callback();\n//       }\n//     }, 20);\n//   };\n\n//   const generateEmailPrompt = (conversationHistory) => {\n//     return `\n//       You are a helpful assistant. Based on the following conversation history, generate a detailed and polite email for a Virginia Tech advisor. The email should be written from the perspective of a Virginia Tech student asking for more information or assistance based on their enquiry.\n\n//       Conversation History: ${conversationHistory.map(message => {\n//         return `\\n${message.role === 'user' ? 'User' : 'Assistant'}: ${message.content}`;\n//       }).join('')}\n\n//       The name of the student is ${studentName}\n\n//       Please ensure the email includes:\n//       - A formal greeting.\n//       - A clear and detailed description of the student's enquiry.\n//       - Relevant details or context that the student has provided.\n//       - A polite closing statement thanking the advisor for their time and asking for more detailed information or assistance.\n//       - Keep it short and professional\n\n//       The email should be structured formally and professionally, appropriate for a university setting.\n//     `;\n//   };\n\n//   const handleYesNoButtons = (replyText, uniqueId) => {\n//     if (replyText.toLowerCase().includes(\"help\")) {\n//       const yesButton = document.createElement(\"button\");\n//       yesButton.className = \"yes-button\";\n//       yesButton.textContent = \"Yes\";\n//       const noButton = document.createElement(\"button\");\n//       noButton.className = \"no-button\";\n//       noButton.textContent = \"No\";\n\n//       const buttonContainer = document.createElement(\"div\");\n//       buttonContainer.id = \"button-container\";\n//       buttonContainer.appendChild(yesButton);\n//       buttonContainer.appendChild(noButton);\n//       document.querySelector(`.${styles.chatContainer}`).appendChild(buttonContainer);\n\n//       document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n\n//       noButton.addEventListener(\"click\", () => {\n//         const noMessage = { role: 'user', content: \"No\" };\n//         setMessages([...messages, noMessage]);\n//         setMessageHistory([...messageHistory, noMessage]);\n//         document.querySelector(`#${uniqueId}`).textContent = \"Thank you! Please let me know if you have more questions.\";\n//         document.getElementById(\"button-container\").remove();\n//       });\n\n//       yesButton.addEventListener(\"click\", () => {\n//         const yesMessage = { role: 'user', content: \"Yes\" };\n//         setMessages([...messages, yesMessage]);\n//         setMessageHistory([...messageHistory, yesMessage]);\n//         const responseDiv = document.createElement(\"div\");\n//         responseDiv.id = \"bot-message\";\n//         responseDiv.innerHTML = chatStripe(true, \"Would you like to email the advisor or continue the conversation?\", uniqueId);\n\n//         const emailButton = document.createElement(\"button\");\n//         emailButton.className = \"response-button\";\n//         emailButton.textContent = \"Email Advisor\";\n//         const askMindcraftButton = document.createElement(\"button\");\n//         askMindcraftButton.className = \"response-button\";\n//         askMindcraftButton.textContent = \"Continue Chat\";\n//         document.getElementById(\"button-container\").remove();\n\n//         responseDiv.appendChild(document.createElement(\"br\"));\n//         responseDiv.appendChild(emailButton);\n//         responseDiv.appendChild(askMindcraftButton);\n\n//         document.querySelector(`.${styles.chatContainer}`).appendChild(responseDiv);\n//         document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n\n//         emailButton.addEventListener(\"click\", async () => {\n//           const emailMessage = { role: 'user', content: \"Yes, Please help me email my advisor\" };\n//           setMessages([...messages, emailMessage]);\n//           setMessageHistory([...messageHistory, emailMessage]);\n\n//           const emailPrompt = generateEmailPrompt(messageHistory);\n//           const emailResponse = await sendMessageToChatGPT([{ role: \"user\", content: emailPrompt }]);\n//           const subjectMatch = emailResponse.match(/Subject: (.*)\\n/);\n//           const subject = subjectMatch ? subjectMatch[1] : \"Inquiry\";\n//           const body = emailResponse.replace(/Subject: .*?\\n/, \"\");\n\n//           const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n//           window.location.href = mailtoLink;\n\n//           document.getElementById(\"bot-message\").remove();\n//           const finalMessage = { role: 'assistant', content: \"Hope I answered your question. Please let me know if you have more questions\" };\n//           setMessages([...messages, finalMessage]);\n//           setMessageHistory([...messageHistory, finalMessage]);\n//         });\n\n//         askMindcraftButton.addEventListener(\"click\", () => {\n//           const askMindcraftMessage = { role: 'user', content: \"Continue chat\" };\n//           setMessages([...messages, askMindcraftMessage]);\n//           setMessageHistory([...messageHistory, askMindcraftMessage]);\n\n//           const finalMessage = { role: 'assistant', content: \"Please provide more details or ask another question.\" };\n//           setMessages([...messages, finalMessage]);\n//           setMessageHistory([...messageHistory, finalMessage]);\n//           document.getElementById(\"bot-message\").remove();\n//         });\n//       });\n//     }\n//   };\n\n//   const showLoading = () => {\n//     document.getElementById('loading').style.display = 'flex';\n//   };\n\n//   return (\n//     <div className={styles.chatPage}> {/* Apply the scoped class */}\n//     <div>\n//       <div\n//         id=\"loading\"\n//         style={{\n//           position: 'fixed',\n//           width: '100%',\n//           height: '100%',\n//           top: 0,\n//           left: 0,\n//           display: 'flex',\n//           justifyContent: 'center',\n//           alignItems: 'center',\n//           background: '#861F41',\n//           zIndex: 1000,\n//         }}\n//       >\n//         <img src={dalleBot} id={styles.loadingImage} alt=\"loading\" />\n//       </div>\n//       <div id={styles.app}>\n//         <div id={styles.header}>\n//           <button id={styles.homeButton} onClick={handleHomeClick}>\n//             <img src={homeIcon} alt=\"Home\" />\n//           </button>\n//           <h1 id={styles.chatHeader}>MindCraft VT Chatbot</h1>\n//           <select id={styles.categorySelector} defaultValue={category}>\n//             <option value=\"socialLife\">Social Life</option>\n//             <option value=\"academia\">Academia</option>\n//             <option value=\"wellness\">Wellness</option>\n//             <option value=\"tutor\">Tutor</option>\n//           </select>\n//         </div>\n//         <div id={styles.chatContainer} className={styles.chatContainer}>\n//             {messages.map((msg, index) => (\n//               <div key={index} className={`${styles.wrapper} ${msg.role === 'assistant' ? styles.ai : ''}`}>\n//                 <div className={styles.chat}>\n//                   <div className={styles.profile}>\n//                     <img src={msg.role === 'assistant' ? dalleBot : user} alt={msg.role} />\n//                   </div>\n//                   <div className={styles.message} id={msg.id}>{msg.content}</div>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//         <form onSubmit={handleSubmit}>\n//           <textarea\n//             name=\"prompt\"\n//             required\n//             rows=\"1\"\n//             cols=\"1\"\n//             placeholder=\"Ask MindCraft VT...\"\n//             value={input}\n//             onChange={(e) => setInput(e.target.value)}\n//           ></textarea>\n//           <button type=\"submit\" id={styles.submitButton}>\n//             <img src={sendButton} alt=\"Send\" />\n//           </button>\n//         </form>\n//       </div>\n//     </div>\n//     </div>\n//   );\n// };\n\n// export default ChatPage;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatPage = () => {\n  _s();\n  const {\n    category\n  } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    prompt\n  } = location.state || {};\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const formRef = useRef(null);\n  const chatContainerRef = useRef(null);\n  let loadInterval = useRef(null); // useRef to keep track of the loading interval\n\n  const studentName = \"Roshan Ravindran\";\n  let messageHistory = []; // keep track of the message history\n\n  useEffect(() => {\n    const loadingElement = document.getElementById('loading');\n    setTimeout(() => {\n      if (loadingElement) loadingElement.style.display = 'none';\n    }, 1500);\n    if (prompt) {\n      initialChatGPT(prompt);\n    }\n  }, [prompt]);\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const currentChatbot = getChatbotFromPrompt(String(urlParams));\n    const selector = document.getElementById('category-selector');\n    if (selector) {\n      if (currentChatbot) {\n        selector.value = currentChatbot;\n      } else {\n        selector.selectedIndex = 0;\n      }\n    }\n    const prompt_url = urlParams.get('prompt');\n    if (prompt_url) {\n      initialChatGPT(prompt_url);\n    }\n  }, []);\n  const getChatbotFromPrompt = urlPrompt => {\n    const chatbotMapping = {\n      'Social': 'socialLife',\n      'Academia': 'academia',\n      'Wellness': 'wellness',\n      'tutor': 'tutor'\n    };\n    for (const key in chatbotMapping) {\n      if (urlPrompt.includes(key)) {\n        return chatbotMapping[key];\n      }\n    }\n    return null;\n  };\n  const loader = element => {\n    element.textContent = \"\";\n    loadInterval.current = setInterval(() => {\n      element.textContent += \".\";\n      if (element.textContent === \"....\") {\n        element.textContent = \"\";\n      }\n    }, 300);\n  };\n  const typeText = (element, text, callback) => {\n    let index = 0;\n    let interval = setInterval(() => {\n      if (index < text.length) {\n        element.innerHTML += text.charAt(index);\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n        ++index;\n      } else {\n        clearInterval(interval);\n        if (callback) callback();\n      }\n    }, 20);\n  };\n  const handleHomeClick = () => {\n    showLoading();\n    setTimeout(() => {\n      navigate('/chatbot');\n    }, 1500);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const data = new FormData(formRef.current);\n    const prompt = data.get(\"prompt\").trim();\n    if (prompt === \"\") {\n      formRef.current.reset();\n      return;\n    }\n\n    // user's chatstripe\n    setMessages([...messages, chatStripe(false, prompt)]);\n    formRef.current.reset();\n    const uniqueId = generateUniqueId();\n    setMessages([...messages, chatStripe(true, \" \", uniqueId)]);\n    chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    const messageDiv = document.getElementById(uniqueId);\n    loader(messageDiv);\n    try {\n      const chatGPTResponse = await sendMessageToChatGPT(prompt);\n      clearInterval(loadInterval.current);\n      messageDiv.innerHTML = \"\"; // Clear loader\n      if (chatGPTResponse.choices && chatGPTResponse.choices.length > 0) {\n        const replyText = chatGPTResponse.choices[0].message.content;\n        typeText(messageDiv, replyText, () => {\n          messageHistory.push({\n            role: \"assistant\",\n            content: replyText\n          });\n          handleYesNoButtons(replyText, uniqueId);\n        });\n      } else {\n        messageDiv.innerHTML = \"Failed to get a response\";\n      }\n    } catch (error) {\n      clearInterval(loadInterval.current);\n      messageDiv.innerHTML = \"Error: \" + error.toString();\n      console.error(\"Error when calling OpenAI:\", error);\n    }\n  };\n  const initialChatGPT = async initialPrompt => {\n    messageHistory = [];\n    setMessages([{\n      role: 'assistant',\n      content: 'Loading...'\n    }]);\n    const response = await InitialMessageToChatGPT(initialPrompt);\n    const uniqueId = generateUniqueId();\n    setMessages([{\n      role: 'assistant',\n      content: response,\n      id: uniqueId\n    }]);\n    messageHistory.push({\n      role: 'assistant',\n      content: response\n    });\n  };\n  const sendMessageToChatGPT = async message => {\n    messageHistory.push({\n      role: \"user\",\n      content: message\n    });\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer sk-proj-Ujro97vuIFi0BvhkpHnET3BlbkFJ2eiNRzcGGHMHfman9iiE' // replace with your actual API key\n      },\n\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: messageHistory\n      })\n    });\n    const data = await response.json();\n    if (data.choices && data.choices.length > 0) {\n      const replyText = data.choices[0].message.content;\n      messageHistory.push({\n        role: \"assistant\",\n        content: replyText\n      }); // Add bot reply to history\n      return replyText;\n    } else {\n      return \"Failed to get a response\";\n    }\n  };\n  const InitialMessageToChatGPT = async quest => {\n    messageHistory = [{\n      role: \"system\",\n      content: quest\n    }];\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer sk-proj-Ujro97vuIFi0BvhkpHnET3BlbkFJ2eiNRzcGGHMHfman9iiE' // replace with your actual API key\n      },\n\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: messageHistory\n      })\n    });\n    const data = await response.json();\n    if (data.choices && data.choices.length > 0) {\n      const replyText = data.choices[0].message.content;\n      return replyText;\n    } else {\n      return \"Failed to get a response\";\n    }\n  };\n  const generateUniqueId = () => {\n    const timestamp = Date.now();\n    const randomNumber = Math.random();\n    const hexadecimalString = randomNumber.toString(16);\n    return `id-${timestamp}-${hexadecimalString}`;\n  };\n  const chatStripe = (ai_bool, value, uniqueId) => {\n    return `\n      <div class=\"wrapper ${ai_bool ? styles.ai : ''}\">\n        <div class=\"chat\">\n          <div class=\"profile\">\n            <img\n              src=\"${ai_bool ? dalleBot : user}\"\n              alt=\"${ai_bool ? \"bot\" : \"user\"}\"\n            />\n          </div>\n          <div class=\"message\" id=${uniqueId}>${value}</div>\n        </div>\n      </div>\n    `;\n  };\n  const handleYesNoButtons = (replyText, uniqueId) => {\n    if (replyText.toLowerCase().includes(\"help\")) {\n      const yesButton = document.createElement(\"button\");\n      yesButton.className = \"yes-button\";\n      yesButton.textContent = \"Yes\";\n      const noButton = document.createElement(\"button\");\n      noButton.className = \"no-button\";\n      noButton.textContent = \"No\";\n      const buttonContainer = document.createElement(\"div\");\n      buttonContainer.id = \"button-container\";\n      buttonContainer.appendChild(yesButton);\n      buttonContainer.appendChild(noButton);\n      chatContainerRef.current.appendChild(buttonContainer);\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n      noButton.addEventListener(\"click\", () => {\n        chatContainerRef.current.innerHTML += chatStripe(false, \"No\", uniqueId);\n        chatContainerRef.current.innerHTML += chatStripe(true, \"Thank you! Please let me know if you have more questions.\", uniqueId);\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n        document.getElementById(\"button-container\").remove();\n      });\n      yesButton.addEventListener(\"click\", () => {\n        chatContainerRef.current.innerHTML += chatStripe(false, \"Yes\", uniqueId);\n        const responseDiv = document.createElement(\"div\");\n        responseDiv.id = \"bot-message\";\n        chatContainerRef.current.innerHTML += chatStripe(true, \"Would you like to email the advisor or continue the conversation?\", uniqueId);\n        const emailButton = document.createElement(\"button\");\n        emailButton.className = \"response-button\";\n        emailButton.textContent = \"Email Advisor\";\n        const askMindcraftButton = document.createElement(\"button\");\n        askMindcraftButton.className = \"response-button\";\n        askMindcraftButton.textContent = \"Continue Chat\";\n        document.getElementById(\"button-container\").remove();\n        responseDiv.appendChild(document.createElement(\"br\")); // Add line break\n        responseDiv.appendChild(emailButton);\n        responseDiv.appendChild(askMindcraftButton);\n        chatContainerRef.current.appendChild(responseDiv);\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n        emailButton.addEventListener(\"click\", async () => {\n          chatContainerRef.current.innerHTML += chatStripe(false, \"Yes, Please help me email my advisor\", uniqueId);\n          const emailPrompt = generateEmailPrompt(messageHistory);\n          const emailResponse = await sendMessageToChatGPT(emailPrompt);\n          const subjectMatch = emailResponse.match(/Subject: (.*)\\n/);\n          const subject = subjectMatch ? subjectMatch[1] : \"Inquiry\";\n          const body = emailResponse.replace(/Subject: .*?\\n/, \"\");\n          const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n          window.location.href = mailtoLink;\n          document.getElementById(\"bot-message\").remove();\n          chatContainerRef.current.innerHTML += chatStripe(true, \"Hope I answered your question. Please let me know if you have more questions\", uniqueId);\n        });\n        askMindcraftButton.addEventListener(\"click\", () => {\n          chatContainerRef.current.innerHTML += chatStripe(false, \"Continue chat\", uniqueId);\n          chatContainerRef.current.innerHTML += chatStripe(true, \"Please provide more details or ask another question.\", uniqueId);\n          chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n          document.getElementById(\"bot-message\").remove();\n        });\n      });\n    }\n  };\n  const generateEmailPrompt = conversationHistory => {\n    return `\n      You are a helpful assistant. Based on the following conversation history, generate a detailed and polite email for a Virginia Tech advisor. The email should be written from the perspective of a Virginia Tech student asking for more information or assistance based on their enquiry.\n\n      Conversation History: ${conversationHistory.map(message => {\n      return `\\n${message.role === 'user' ? 'User' : 'Assistant'}: ${message.content}`;\n    }).join('')}\n\n      The name of the student is ${studentName}\n\n      Please ensure the email includes:\n      - A formal greeting.\n      - A clear and detailed description of the student's enquiry.\n      - Relevant details or context that the student has provided.\n      - A polite closing statement thanking the advisor for their time and asking for more detailed information or assistance.\n      - Keep it short and professional\n\n      The email should be structured formally and professionally, appropriate for a university setting.\n    `;\n  };\n  const showLoading = () => {\n    document.getElementById('loading').style.display = 'flex';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chatPage,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"loading\",\n        style: {\n          position: 'fixed',\n          width: '100%',\n          height: '100%',\n          top: 0,\n          left: 0,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          background: '#861F41',\n          zIndex: 1000\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: dalleBot,\n          id: styles.loadingImage,\n          alt: \"loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 726,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: styles.app,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: styles.header,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            id: styles.homeButton,\n            onClick: handleHomeClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: homeIcon,\n              alt: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 731,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 730,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            id: styles.chatHeader,\n            children: \"MindCraft VT Chatbot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: styles.categorySelector,\n            defaultValue: category,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"socialLife\",\n              children: \"Social Life\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 735,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"academia\",\n              children: \"Academia\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 736,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"wellness\",\n              children: \"Wellness\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 737,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"tutor\",\n              children: \"Tutor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 738,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 734,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 729,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: styles.chatContainer,\n          className: styles.chatContainer,\n          ref: chatContainerRef,\n          children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: msg\n            }\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 743,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          ref: formRef,\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            name: \"prompt\",\n            required: true,\n            rows: \"1\",\n            cols: \"1\",\n            placeholder: \"Ask MindCraft VT...\",\n            value: input,\n            onChange: e => setInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 747,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            id: styles.submitButton,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: sendButton,\n              alt: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 757,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 756,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 746,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 728,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 710,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 709,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatPage, \"LTi5VlpyrNN9Y60/YzNtRxsXZMA=\", false, function () {\n  return [useParams, useLocation, useNavigate];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useLocation","useNavigate","useParams","homeIcon","dalleBot","sendButton","styles","user","ChatPage","category","location","navigate","prompt","state","input","setInput","messages","setMessages","formRef","chatContainerRef","loadInterval","studentName","messageHistory","loadingElement","document","getElementById","setTimeout","style","display","initialChatGPT","urlParams","URLSearchParams","window","search","currentChatbot","getChatbotFromPrompt","String","selector","value","selectedIndex","prompt_url","get","urlPrompt","chatbotMapping","key","includes","loader","element","textContent","current","setInterval","typeText","text","callback","index","interval","length","innerHTML","charAt","scrollTop","scrollHeight","clearInterval","handleHomeClick","showLoading","handleSubmit","e","preventDefault","data","FormData","trim","reset","chatStripe","uniqueId","generateUniqueId","messageDiv","chatGPTResponse","sendMessageToChatGPT","choices","replyText","message","content","push","role","handleYesNoButtons","error","toString","console","initialPrompt","response","InitialMessageToChatGPT","id","fetch","method","headers","body","JSON","stringify","model","json","quest","timestamp","Date","now","randomNumber","Math","random","hexadecimalString","ai_bool","ai","toLowerCase","yesButton","createElement","className","noButton","buttonContainer","appendChild","addEventListener","remove","responseDiv","emailButton","askMindcraftButton","emailPrompt","generateEmailPrompt","emailResponse","subjectMatch","match","subject","replace","mailtoLink","encodeURIComponent","href","conversationHistory","map","join","chatPage","position","width","height","top","left","justifyContent","alignItems","background","zIndex","loadingImage","app","header","homeButton","chatHeader","categorySelector","chatContainer","msg","__html","target","submitButton"],"sources":["/Users/roshanravindran/Downloads/MERN_Login_App_with_ResetEmail-Main/client/src/components/ChatPage.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport homeIcon from '../assets/home.png';\nimport dalleBot from '../assets/dalle_bot.jpg';\nimport sendButton from '../assets/send_button.png';\nimport styles from '../styles/ChatPage.module.css';\nimport user from '../assets/vt_student.jpg';\n\n\n// const ChatPage = () => {\n//     const chatContainer = document.querySelector(`.${styles.chatContainer}`);\n\n//   const { category } = useParams();\n//   const form = document.querySelector(\"form\"); \n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const { prompt } = location.state || {};\n//   const [input, setInput] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const [messageHistory, setMessageHistory] = useState([]);\n//   const [quest, setQuest] = useState('');\n//   const studentName = \"Roshan Ravindran\";\n\n//   useEffect(() => {   const loadingElement = document.getElementById('loading');\n//     setTimeout(() => {\n//       if (loadingElement) loadingElement.style.display = 'none';\n//     }, 1500);\n\n//     if (prompt) {\n//       initialChatGPT(prompt);\n//       console.log(\"the prompt is\" + prompt)\n//     }\n//   }, [prompt]);\n\n//   useEffect(() => {\n//     const urlParams = new URLSearchParams(window.location.search);\n//     const currentChatbot = getChatbotFromPrompt(String(urlParams));\n//     const selector = document.getElementById('category-selector');\n\n//     if (selector) {\n//       if (currentChatbot) {\n//         selector.value = currentChatbot;\n//       } else {\n//         selector.selectedIndex = 0;\n//       }\n//     }\n\n//     const prompt_url = urlParams.get('prompt');\n//     if (prompt_url) {\n//       setQuest(prompt_url);\n//     }\n//   }, []);\n\n//   const handleHomeClick = () => {\n//     showLoading();\n//     setTimeout(() => {\n//       navigate('/chatbot');\n//     }, 1500);\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (input.trim() === \"\") {\n//       return;\n//     }\n\n//     const newMessage = { role: 'user', content: input };\n//     setMessages([...messages, newMessage]);\n//     setMessageHistory([...messageHistory, newMessage]);\n//     setInput('');\n\n//     await handleChatGPT(input);\n//   };\n\n//   const handleChatGPT = async (message) => {\n//     const uniqueId = generateUniqueId();\n//     const newMessage = { role: 'assistant', content: 'Loading...', id: uniqueId };\n//     setMessages((prevMessages) => [...prevMessages, newMessage]);\n\n//     const response = await sendMessageToChatGPT(messageHistory.concat([{ role: 'user', content: message }]));\n\n//     setMessages((prevMessages) => {\n//       const updatedMessages = [...prevMessages];\n//       const index = updatedMessages.findIndex(msg => msg.id === uniqueId);\n//       if (index !== -1) {\n//         updatedMessages[index].content = '';\n//         typeText(document.getElementById(uniqueId), response, () => handleYesNoButtons(response, uniqueId));\n//       }\n//       return updatedMessages;\n//     });\n\n//     setMessageHistory((prevHistory) => [...prevHistory, { role: 'assistant', content: response }]);\n//   };\n\n//   const initialChatGPT = async (initialPrompt) => {\n//     setQuest(initialPrompt);\n//     // setMessages([{ role: 'assistant', content: 'Loading...' }]);\n//     form.reset();\n\n//   // bot's chatstripe, initially blank\n//     const uniqueId = generateUniqueId();\n//     chatContainer.innerHTML += chatStripe(true, \" \", uniqueId);\n\n//     chatContainer.scrollTop = chatContainer.scrollHeight;\n\n//     const messageDiv = document.getElementById(uniqueId);\n//     loader(messageDiv);\n//     const response = await InitialMessageToChatGPT(initialPrompt);\n//     setMessages([{ role: 'assistant', content: response }]);\n//     setMessageHistory([{ role: 'assistant', content: response }]);\n//   };\n\n//   const sendMessageToChatGPT = async (promptMessages) => {\n//     const response = await fetch('https://api.openai.com/v1/chat/completions', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': 'Bearer sk-proj-Ujro97vuIFi0BvhkpHnET3BlbkFJ2eiNRzcGGHMHfman9iiE'\n//       },\n//       body: JSON.stringify({\n//         model: \"gpt-3.5-turbo\",\n//         messages: promptMessages\n//       })\n//     });\n//     const data = await response.json();\n//     if (data.choices && data.choices.length > 0) {\n//       const replyText = data.choices[0].message.content;\n//       return replyText;\n//     } else {\n//       return \"Failed to get a response\";\n//     }\n//   };\n\n//   const InitialMessageToChatGPT = async (quest) => {\n//     messageHistory = [];\n//     const initialPrompt = quest;\n//     messageHistory.push({ role: \"system\", content: initialPrompt });\n//   console.log(messageHistory)\n//     const response = await fetch('https://api.openai.com/v1/chat/completions', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//         'Authorization': 'Bearer sk-proj-ClyheMv50nSvIf1Q3g84T3BlbkFJoZ6isdGyOQEQcCm8GlzN'\n//       },\n//       body: JSON.stringify({\n//         model: \"gpt-3.5-turbo\",\n//         messages: [{ role: \"system\", content: quest }]\n//       })\n//     });\n//     const data = await response.json();\n//   if (data.choices && data.choices.length > 0) {\n//     const replyText = data.choices[0].message.content;\n//     const uniqueId = generateUniqueId();\n//     chatContainer.innerHTML += chatStripe(true, replyText, uniqueId);\n//     messageHistory.push({ role: \"assistant\", content: replyText });\n//   } else {\n//     console.error(\"Failed to get a valid response from the API.\");\n//     chatContainer.innerHTML += `<div>Error: Failed to get a response from the assistant.</div>`;\n//   }\n//   return data;\n//   };\n\n//   const chatbotMapping = {\n//     'Social': 'socialLife',\n//     'Academia': 'academia',\n//     'Wellness': 'wellness',\n//     'tutor': 'tutor'\n//   };\n\n//   const getChatbotFromPrompt = (urlPrompt) => {\n//     for (const key in chatbotMapping) {\n//       if (urlPrompt.includes(key)) {\n//         return chatbotMapping[key];\n//       }\n//     }\n//     return null;\n//   };\n\n//   const generateUniqueId = () => {\n//     const timestamp = Date.now();\n//     const randomNumber = Math.random();\n//     const hexadecimalString = randomNumber.toString(16);\n\n//     return `id-${timestamp}-${hexadecimalString}`;\n//   };\n\n//   const chatStripe = (ai_bool, value, uniqueId) => {\n//     return `\n//       <div class=\"wrapper ${ai_bool ? styles.ai : ''}\">\n//         <div class=\"chat\">\n//           <div class=\"profile\">\n//             <img\n//               src=\"${ai_bool ? dalleBot : user}\"\n//               alt=\"${ai_bool ? \"bot\" : \"user\"}\"\n//             />\n//           </div>\n//           <div class=\"message\" id=${uniqueId}>${value}</div>\n//         </div>\n//       </div>\n//     `;\n//   };\n\n//   const loader = (element) => {\n//     element.textContent = \"\";\n//     let loadInterval = setInterval(() => {\n//       element.textContent += \".\";\n//       if (element.textContent === \"....\") {\n//         element.textContent = \"\";\n//       }\n//     }, 300);\n//   };\n\n//   const typeText = (element, text, callback) => {\n//     let index = 0;\n//     let interval = setInterval(() => {\n//       if (index < text.length) {\n//         element.innerHTML += text.charAt(index);\n//         document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n//         ++index;\n//       } else {\n//         clearInterval(interval);\n//         if (callback) callback();\n//       }\n//     }, 20);\n//   };\n\n//   const generateEmailPrompt = (conversationHistory) => {\n//     return `\n//       You are a helpful assistant. Based on the following conversation history, generate a detailed and polite email for a Virginia Tech advisor. The email should be written from the perspective of a Virginia Tech student asking for more information or assistance based on their enquiry.\n\n//       Conversation History: ${conversationHistory.map(message => {\n//         return `\\n${message.role === 'user' ? 'User' : 'Assistant'}: ${message.content}`;\n//       }).join('')}\n\n//       The name of the student is ${studentName}\n\n//       Please ensure the email includes:\n//       - A formal greeting.\n//       - A clear and detailed description of the student's enquiry.\n//       - Relevant details or context that the student has provided.\n//       - A polite closing statement thanking the advisor for their time and asking for more detailed information or assistance.\n//       - Keep it short and professional\n\n//       The email should be structured formally and professionally, appropriate for a university setting.\n//     `;\n//   };\n\n//   const handleYesNoButtons = (replyText, uniqueId) => {\n//     if (replyText.toLowerCase().includes(\"help\")) {\n//       const yesButton = document.createElement(\"button\");\n//       yesButton.className = \"yes-button\";\n//       yesButton.textContent = \"Yes\";\n//       const noButton = document.createElement(\"button\");\n//       noButton.className = \"no-button\";\n//       noButton.textContent = \"No\";\n\n//       const buttonContainer = document.createElement(\"div\");\n//       buttonContainer.id = \"button-container\";\n//       buttonContainer.appendChild(yesButton);\n//       buttonContainer.appendChild(noButton);\n//       document.querySelector(`.${styles.chatContainer}`).appendChild(buttonContainer);\n\n//       document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n\n//       noButton.addEventListener(\"click\", () => {\n//         const noMessage = { role: 'user', content: \"No\" };\n//         setMessages([...messages, noMessage]);\n//         setMessageHistory([...messageHistory, noMessage]);\n//         document.querySelector(`#${uniqueId}`).textContent = \"Thank you! Please let me know if you have more questions.\";\n//         document.getElementById(\"button-container\").remove();\n//       });\n\n//       yesButton.addEventListener(\"click\", () => {\n//         const yesMessage = { role: 'user', content: \"Yes\" };\n//         setMessages([...messages, yesMessage]);\n//         setMessageHistory([...messageHistory, yesMessage]);\n//         const responseDiv = document.createElement(\"div\");\n//         responseDiv.id = \"bot-message\";\n//         responseDiv.innerHTML = chatStripe(true, \"Would you like to email the advisor or continue the conversation?\", uniqueId);\n\n//         const emailButton = document.createElement(\"button\");\n//         emailButton.className = \"response-button\";\n//         emailButton.textContent = \"Email Advisor\";\n//         const askMindcraftButton = document.createElement(\"button\");\n//         askMindcraftButton.className = \"response-button\";\n//         askMindcraftButton.textContent = \"Continue Chat\";\n//         document.getElementById(\"button-container\").remove();\n\n//         responseDiv.appendChild(document.createElement(\"br\"));\n//         responseDiv.appendChild(emailButton);\n//         responseDiv.appendChild(askMindcraftButton);\n\n//         document.querySelector(`.${styles.chatContainer}`).appendChild(responseDiv);\n//         document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n\n//         emailButton.addEventListener(\"click\", async () => {\n//           const emailMessage = { role: 'user', content: \"Yes, Please help me email my advisor\" };\n//           setMessages([...messages, emailMessage]);\n//           setMessageHistory([...messageHistory, emailMessage]);\n\n//           const emailPrompt = generateEmailPrompt(messageHistory);\n//           const emailResponse = await sendMessageToChatGPT([{ role: \"user\", content: emailPrompt }]);\n//           const subjectMatch = emailResponse.match(/Subject: (.*)\\n/);\n//           const subject = subjectMatch ? subjectMatch[1] : \"Inquiry\";\n//           const body = emailResponse.replace(/Subject: .*?\\n/, \"\");\n\n//           const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n//           window.location.href = mailtoLink;\n\n//           document.getElementById(\"bot-message\").remove();\n//           const finalMessage = { role: 'assistant', content: \"Hope I answered your question. Please let me know if you have more questions\" };\n//           setMessages([...messages, finalMessage]);\n//           setMessageHistory([...messageHistory, finalMessage]);\n//         });\n\n//         askMindcraftButton.addEventListener(\"click\", () => {\n//           const askMindcraftMessage = { role: 'user', content: \"Continue chat\" };\n//           setMessages([...messages, askMindcraftMessage]);\n//           setMessageHistory([...messageHistory, askMindcraftMessage]);\n\n//           const finalMessage = { role: 'assistant', content: \"Please provide more details or ask another question.\" };\n//           setMessages([...messages, finalMessage]);\n//           setMessageHistory([...messageHistory, finalMessage]);\n//           document.getElementById(\"bot-message\").remove();\n//         });\n//       });\n//     }\n//   };\n\n//   const showLoading = () => {\n//     document.getElementById('loading').style.display = 'flex';\n//   };\n\n//   return (\n//     <div className={styles.chatPage}> {/* Apply the scoped class */}\n//     <div>\n//       <div\n//         id=\"loading\"\n//         style={{\n//           position: 'fixed',\n//           width: '100%',\n//           height: '100%',\n//           top: 0,\n//           left: 0,\n//           display: 'flex',\n//           justifyContent: 'center',\n//           alignItems: 'center',\n//           background: '#861F41',\n//           zIndex: 1000,\n//         }}\n//       >\n//         <img src={dalleBot} id={styles.loadingImage} alt=\"loading\" />\n//       </div>\n//       <div id={styles.app}>\n//         <div id={styles.header}>\n//           <button id={styles.homeButton} onClick={handleHomeClick}>\n//             <img src={homeIcon} alt=\"Home\" />\n//           </button>\n//           <h1 id={styles.chatHeader}>MindCraft VT Chatbot</h1>\n//           <select id={styles.categorySelector} defaultValue={category}>\n//             <option value=\"socialLife\">Social Life</option>\n//             <option value=\"academia\">Academia</option>\n//             <option value=\"wellness\">Wellness</option>\n//             <option value=\"tutor\">Tutor</option>\n//           </select>\n//         </div>\n//         <div id={styles.chatContainer} className={styles.chatContainer}>\n//             {messages.map((msg, index) => (\n//               <div key={index} className={`${styles.wrapper} ${msg.role === 'assistant' ? styles.ai : ''}`}>\n//                 <div className={styles.chat}>\n//                   <div className={styles.profile}>\n//                     <img src={msg.role === 'assistant' ? dalleBot : user} alt={msg.role} />\n//                   </div>\n//                   <div className={styles.message} id={msg.id}>{msg.content}</div>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//         <form onSubmit={handleSubmit}>\n//           <textarea\n//             name=\"prompt\"\n//             required\n//             rows=\"1\"\n//             cols=\"1\"\n//             placeholder=\"Ask MindCraft VT...\"\n//             value={input}\n//             onChange={(e) => setInput(e.target.value)}\n//           ></textarea>\n//           <button type=\"submit\" id={styles.submitButton}>\n//             <img src={sendButton} alt=\"Send\" />\n//           </button>\n//         </form>\n//       </div>\n//     </div>\n//     </div>\n//   );\n// };\n\n// export default ChatPage;\n\nconst ChatPage = () => {\n  const { category } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { prompt } = location.state || {};\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const formRef = useRef(null);\n  const chatContainerRef = useRef(null);\n  let loadInterval = useRef(null); // useRef to keep track of the loading interval\n\n  const studentName = \"Roshan Ravindran\";\n  let messageHistory = []; // keep track of the message history\n\n  useEffect(() => {\n    const loadingElement = document.getElementById('loading');\n    setTimeout(() => {\n      if (loadingElement) loadingElement.style.display = 'none';\n    }, 1500);\n\n    if (prompt) {\n      initialChatGPT(prompt);\n    }\n  }, [prompt]);\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const currentChatbot = getChatbotFromPrompt(String(urlParams));\n    const selector = document.getElementById('category-selector');\n\n    if (selector) {\n      if (currentChatbot) {\n        selector.value = currentChatbot;\n      } else {\n        selector.selectedIndex = 0;\n      }\n    }\n\n    const prompt_url = urlParams.get('prompt');\n    if (prompt_url) {\n      initialChatGPT(prompt_url);\n    }\n  }, []);\n\n  const getChatbotFromPrompt = (urlPrompt) => {\n    const chatbotMapping = {\n      'Social': 'socialLife',\n      'Academia': 'academia',\n      'Wellness': 'wellness',\n      'tutor': 'tutor'\n    };\n\n    for (const key in chatbotMapping) {\n      if (urlPrompt.includes(key)) {\n        return chatbotMapping[key];\n      }\n    }\n    return null;\n  };\n\n  const loader = (element) => {\n    element.textContent = \"\";\n    loadInterval.current = setInterval(() => {\n      element.textContent += \".\";\n      if (element.textContent === \"....\") {\n        element.textContent = \"\";\n      }\n    }, 300);\n  };\n\n  const typeText = (element, text, callback) => {\n    let index = 0;\n    let interval = setInterval(() => {\n      if (index < text.length) {\n        element.innerHTML += text.charAt(index);\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n        ++index;\n      } else {\n        clearInterval(interval);\n        if (callback) callback();\n      }\n    }, 20);\n  };\n\n  const handleHomeClick = () => {\n    showLoading();\n    setTimeout(() => {\n      navigate('/chatbot');\n    }, 1500);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const data = new FormData(formRef.current);\n    const prompt = data.get(\"prompt\").trim();\n\n    if (prompt === \"\") {\n      formRef.current.reset();\n      return;\n    }\n\n    // user's chatstripe\n    setMessages([...messages, chatStripe(false, prompt)]);\n    formRef.current.reset();\n\n    const uniqueId = generateUniqueId();\n    setMessages([...messages, chatStripe(true, \" \", uniqueId)]);\n\n    chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n\n    const messageDiv = document.getElementById(uniqueId);\n    loader(messageDiv);\n    try {\n      const chatGPTResponse = await sendMessageToChatGPT(prompt);\n      clearInterval(loadInterval.current);\n      messageDiv.innerHTML = \"\"; // Clear loader\n      if (chatGPTResponse.choices && chatGPTResponse.choices.length > 0) {\n        const replyText = chatGPTResponse.choices[0].message.content;\n        typeText(messageDiv, replyText, () => {\n          messageHistory.push({ role: \"assistant\", content: replyText });\n          handleYesNoButtons(replyText, uniqueId);\n        });\n      } else {\n        messageDiv.innerHTML = \"Failed to get a response\";\n      }\n    } catch (error) {\n      clearInterval(loadInterval.current);\n      messageDiv.innerHTML = \"Error: \" + error.toString();\n      console.error(\"Error when calling OpenAI:\", error);\n    }\n  };\n\n  const initialChatGPT = async (initialPrompt) => {\n    messageHistory = [];\n    setMessages([{ role: 'assistant', content: 'Loading...' }]);\n    const response = await InitialMessageToChatGPT(initialPrompt);\n    const uniqueId = generateUniqueId();\n    setMessages([{ role: 'assistant', content: response, id: uniqueId }]);\n    messageHistory.push({ role: 'assistant', content: response });\n  };\n\n  const sendMessageToChatGPT = async (message) => {\n    messageHistory.push({ role: \"user\", content: message });\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer sk-proj-Ujro97vuIFi0BvhkpHnET3BlbkFJ2eiNRzcGGHMHfman9iiE' // replace with your actual API key\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: messageHistory\n      })\n    });\n    const data = await response.json();\n    if (data.choices && data.choices.length > 0) {\n      const replyText = data.choices[0].message.content;\n      messageHistory.push({ role: \"assistant\", content: replyText }); // Add bot reply to history\n      return replyText;\n    } else {\n      return \"Failed to get a response\";\n    }\n  };\n\n  const InitialMessageToChatGPT = async (quest) => {\n    messageHistory = [{ role: \"system\", content: quest }];\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer sk-proj-Ujro97vuIFi0BvhkpHnET3BlbkFJ2eiNRzcGGHMHfman9iiE' // replace with your actual API key\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: messageHistory\n      })\n    });\n    const data = await response.json();\n    if (data.choices && data.choices.length > 0) {\n      const replyText = data.choices[0].message.content;\n      return replyText;\n    } else {\n      return \"Failed to get a response\";\n    }\n  };\n\n  const generateUniqueId = () => {\n    const timestamp = Date.now();\n    const randomNumber = Math.random();\n    const hexadecimalString = randomNumber.toString(16);\n\n    return `id-${timestamp}-${hexadecimalString}`;\n  };\n\n  const chatStripe = (ai_bool, value, uniqueId) => {\n    return `\n      <div class=\"wrapper ${ai_bool ? styles.ai : ''}\">\n        <div class=\"chat\">\n          <div class=\"profile\">\n            <img\n              src=\"${ai_bool ? dalleBot : user}\"\n              alt=\"${ai_bool ? \"bot\" : \"user\"}\"\n            />\n          </div>\n          <div class=\"message\" id=${uniqueId}>${value}</div>\n        </div>\n      </div>\n    `;\n  };\n\n  const handleYesNoButtons = (replyText, uniqueId) => {\n    if (replyText.toLowerCase().includes(\"help\")) {\n      const yesButton = document.createElement(\"button\");\n      yesButton.className = \"yes-button\";\n      yesButton.textContent = \"Yes\";\n      const noButton = document.createElement(\"button\");\n      noButton.className = \"no-button\";\n      noButton.textContent = \"No\";\n\n      const buttonContainer = document.createElement(\"div\");\n      buttonContainer.id = \"button-container\";\n      buttonContainer.appendChild(yesButton);\n      buttonContainer.appendChild(noButton);\n      chatContainerRef.current.appendChild(buttonContainer);\n\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n\n      noButton.addEventListener(\"click\", () => {\n        chatContainerRef.current.innerHTML += chatStripe(false, \"No\", uniqueId);\n        chatContainerRef.current.innerHTML += chatStripe(true, \"Thank you! Please let me know if you have more questions.\", uniqueId);\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n        document.getElementById(\"button-container\").remove();\n      });\n\n      yesButton.addEventListener(\"click\", () => {\n        chatContainerRef.current.innerHTML += chatStripe(false, \"Yes\", uniqueId);\n        const responseDiv = document.createElement(\"div\");\n        responseDiv.id = \"bot-message\";\n        chatContainerRef.current.innerHTML += chatStripe(true, \"Would you like to email the advisor or continue the conversation?\", uniqueId);\n\n        const emailButton = document.createElement(\"button\");\n        emailButton.className = \"response-button\";\n        emailButton.textContent = \"Email Advisor\";\n        const askMindcraftButton = document.createElement(\"button\");\n        askMindcraftButton.className = \"response-button\";\n        askMindcraftButton.textContent = \"Continue Chat\";\n        document.getElementById(\"button-container\").remove();\n\n        responseDiv.appendChild(document.createElement(\"br\")); // Add line break\n        responseDiv.appendChild(emailButton);\n        responseDiv.appendChild(askMindcraftButton);\n\n        chatContainerRef.current.appendChild(responseDiv);\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n\n        emailButton.addEventListener(\"click\", async () => {\n          chatContainerRef.current.innerHTML += chatStripe(false, \"Yes, Please help me email my advisor\", uniqueId);\n\n          const emailPrompt = generateEmailPrompt(messageHistory);\n          const emailResponse = await sendMessageToChatGPT(emailPrompt);\n\n          const subjectMatch = emailResponse.match(/Subject: (.*)\\n/);\n          const subject = subjectMatch ? subjectMatch[1] : \"Inquiry\";\n          const body = emailResponse.replace(/Subject: .*?\\n/, \"\");\n\n          const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n          window.location.href = mailtoLink;\n\n          document.getElementById(\"bot-message\").remove();\n          chatContainerRef.current.innerHTML += chatStripe(true, \"Hope I answered your question. Please let me know if you have more questions\", uniqueId);\n        });\n\n        askMindcraftButton.addEventListener(\"click\", () => {\n          chatContainerRef.current.innerHTML += chatStripe(false, \"Continue chat\", uniqueId);\n          chatContainerRef.current.innerHTML += chatStripe(true, \"Please provide more details or ask another question.\", uniqueId);\n          chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n          document.getElementById(\"bot-message\").remove();\n        });\n      });\n    }\n  };\n\n  const generateEmailPrompt = (conversationHistory) => {\n    return `\n      You are a helpful assistant. Based on the following conversation history, generate a detailed and polite email for a Virginia Tech advisor. The email should be written from the perspective of a Virginia Tech student asking for more information or assistance based on their enquiry.\n\n      Conversation History: ${conversationHistory.map(message => {\n        return `\\n${message.role === 'user' ? 'User' : 'Assistant'}: ${message.content}`;\n      }).join('')}\n\n      The name of the student is ${studentName}\n\n      Please ensure the email includes:\n      - A formal greeting.\n      - A clear and detailed description of the student's enquiry.\n      - Relevant details or context that the student has provided.\n      - A polite closing statement thanking the advisor for their time and asking for more detailed information or assistance.\n      - Keep it short and professional\n\n      The email should be structured formally and professionally, appropriate for a university setting.\n    `;\n  };\n\n  const showLoading = () => {\n    document.getElementById('loading').style.display = 'flex';\n  };\n\n  return (\n    <div className={styles.chatPage}>\n      <div>\n        <div\n          id=\"loading\"\n          style={{\n            position: 'fixed',\n            width: '100%',\n            height: '100%',\n            top: 0,\n            left: 0,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            background: '#861F41',\n            zIndex: 1000,\n          }}\n        >\n          <img src={dalleBot} id={styles.loadingImage} alt=\"loading\" />\n        </div>\n        <div id={styles.app}>\n          <div id={styles.header}>\n            <button id={styles.homeButton} onClick={handleHomeClick}>\n              <img src={homeIcon} alt=\"Home\" />\n            </button>\n            <h1 id={styles.chatHeader}>MindCraft VT Chatbot</h1>\n            <select id={styles.categorySelector} defaultValue={category}>\n              <option value=\"socialLife\">Social Life</option>\n              <option value=\"academia\">Academia</option>\n              <option value=\"wellness\">Wellness</option>\n              <option value=\"tutor\">Tutor</option>\n            </select>\n          </div>\n          <div id={styles.chatContainer} className={styles.chatContainer} ref={chatContainerRef}>\n            {messages.map((msg, index) => (\n              <div key={index} dangerouslySetInnerHTML={{ __html: msg }} />\n            ))}\n          </div>\n          <form onSubmit={handleSubmit} ref={formRef}>\n            <textarea\n              name=\"prompt\"\n              required\n              rows=\"1\"\n              cols=\"1\"\n              placeholder=\"Ask MindCraft VT...\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n            ></textarea>\n            <button type=\"submit\" id={styles.submitButton}>\n              <img src={sendButton} alt=\"Send\" />\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,WAAW,EAAEC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACtE,OAAOC,QAAQ,MAAM,oBAAoB;AACzC,OAAOC,QAAQ,MAAM,yBAAyB;AAC9C,OAAOC,UAAU,MAAM,2BAA2B;AAClD,OAAOC,MAAM,MAAM,+BAA+B;AAClD,OAAOC,IAAI,MAAM,0BAA0B;;AAG3C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAEA,MAAMC,QAAQ,GAAG,MAAM;EAAA;EACrB,MAAM;IAAEC;EAAS,CAAC,GAAGP,SAAS,EAAE;EAChC,MAAMQ,QAAQ,GAAGV,WAAW,EAAE;EAC9B,MAAMW,QAAQ,GAAGV,WAAW,EAAE;EAC9B,MAAM;IAAEW;EAAO,CAAC,GAAGF,QAAQ,CAACG,KAAK,IAAI,CAAC,CAAC;EACvC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMmB,OAAO,GAAGpB,MAAM,CAAC,IAAI,CAAC;EA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}