{"ast":null,"code":"var _jsxFileName = \"/Users/roshanravindran/Downloads/MERN_Login_App_with_ResetEmail-Main/client/src/components/ChatPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport homeIcon from '../assets/home.png';\nimport dalleBot from '../assets/dalle_bot.jpg';\nimport sendButton from '../assets/send_button.png';\nimport styles from '../styles/ChatPage.module.css';\nimport user from '../assets/vt_student.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatPage = () => {\n  _s();\n  const {\n    category\n  } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    prompt\n  } = location.state || {};\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [messageHistory, setMessageHistory] = useState([]);\n  const [quest, setQuest] = useState('');\n  const studentName = \"Roshan Ravindran\";\n  useEffect(() => {\n    const loadingElement = document.getElementById('loading');\n    setTimeout(() => {\n      if (loadingElement) loadingElement.style.display = 'none';\n    }, 1500);\n    if (prompt) {\n      initialChatGPT(prompt);\n      console.log(\"the prompt is\" + prompt);\n    }\n  }, [prompt]);\n  useEffect(() => {\n    console.log(\"Message History Updated:\", messageHistory);\n  }, [messageHistory]);\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const currentChatbot = getChatbotFromPrompt(String(urlParams));\n    const selector = document.getElementById('category-selector');\n    if (selector) {\n      if (currentChatbot) {\n        selector.value = currentChatbot;\n      } else {\n        selector.selectedIndex = 0;\n      }\n    }\n    const prompt_url = urlParams.get('prompt');\n    if (prompt_url) {\n      setQuest(prompt_url);\n    }\n  }, []);\n  const handleHomeClick = () => {\n    showLoading();\n    setTimeout(() => {\n      navigate('/chatbot');\n    }, 1500);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    console.log(\"clicked on the submit button\");\n    if (input.trim() === \"\") {\n      return;\n    }\n    const newMessage = {\n      role: 'user',\n      content: input\n    };\n    console.log(\"input\" + newMessage.role + newMessage.content);\n    setMessages([...messages, newMessage]);\n    setMessageHistory([...messageHistory, newMessage]);\n    setInput('');\n    await handleChatGPT(input);\n  };\n  const handleChatGPT = async message => {\n    const uniqueId = generateUniqueId();\n    const newMessage = {\n      role: 'assistant',\n      content: 'Loading...',\n      id: uniqueId\n    };\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n    messageHistory.concat([{\n      role: 'user',\n      content: message\n    }]);\n    const response = await sendMessageToChatGPT(messageHistory.concat([{\n      role: 'user',\n      content: message\n    }]));\n    setMessages(prevMessages => {\n      const updatedMessages = [...prevMessages];\n      const index = updatedMessages.findIndex(msg => msg.id === uniqueId);\n      if (index !== -1) {\n        updatedMessages[index].content = '';\n        typeText(document.getElementById(uniqueId), response, () => handleYesNoButtons(response, uniqueId));\n      }\n      return updatedMessages;\n    });\n    setMessageHistory(prevHistory => [...prevHistory, {\n      role: 'assistant',\n      content: response\n    }]);\n  };\n  const initialChatGPT = async initialPrompt => {\n    setQuest(initialPrompt);\n    const initialMessage = {\n      role: 'system',\n      content: initialPrompt\n    };\n    setMessages([{\n      role: 'assistant',\n      content: 'Loading...'\n    }]);\n    setMessageHistory([initialMessage]);\n    const response = await InitialMessageToChatGPT(initialPrompt);\n    setMessages([{\n      role: 'assistant',\n      content: response\n    }]);\n    setMessageHistory([...messageHistory, {\n      role: 'assistant',\n      content: response\n    }]);\n    // setMessageHistory([{ role: 'assistant', content: response }]);\n  };\n\n  const sendMessageToChatGPT = async promptMessages => {\n    console.log(\"after updating\", promptMessages);\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer sk-proj-Ujro97vuIFi0BvhkpHnET3BlbkFJ2eiNRzcGGHMHfman9iiE'\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: promptMessages\n      })\n    });\n    const data = await response.json();\n    if (data.choices && data.choices.length > 0) {\n      const replyText = data.choices[0].message.content;\n      return replyText;\n    } else {\n      return \"Failed to get a response\";\n    }\n  };\n  const InitialMessageToChatGPT = async quest => {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer sk-proj-ClyheMv50nSvIf1Q3g84T3BlbkFJoZ6isdGyOQEQcCm8GlzN'\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"system\",\n          content: quest\n        }]\n      })\n    });\n    const data = await response.json();\n    if (data.choices && data.choices.length > 0) {\n      const replyText = data.choices[0].message.content;\n      return replyText;\n    } else {\n      return \"Failed to get a response\";\n    }\n  };\n  const chatbotMapping = {\n    'Social': 'socialLife',\n    'Academia': 'academia',\n    'Wellness': 'wellness',\n    'tutor': 'tutor'\n  };\n  const getChatbotFromPrompt = urlPrompt => {\n    for (const key in chatbotMapping) {\n      if (urlPrompt.includes(key)) {\n        return chatbotMapping[key];\n      }\n    }\n    return null;\n  };\n  const generateUniqueId = () => {\n    const timestamp = Date.now();\n    const randomNumber = Math.random();\n    const hexadecimalString = randomNumber.toString(16);\n    return `id-${timestamp}-${hexadecimalString}`;\n  };\n  const chatStripe = (ai_bool, value, uniqueId) => {\n    return `\n      <div class=\"wrapper ${ai_bool ? styles.ai : ''}\">\n        <div class=\"chat\">\n          <div class=\"profile\">\n            <img\n              src=\"${ai_bool ? dalleBot : user}\"\n              alt=\"${ai_bool ? \"bot\" : \"user\"}\"\n            />\n          </div>\n          <div class=\"message\" id=${uniqueId}>${value}</div>\n        </div>\n      </div>\n    `;\n  };\n  const loader = element => {\n    element.textContent = \"\";\n    let loadInterval = setInterval(() => {\n      element.textContent += \".\";\n      if (element.textContent === \"....\") {\n        element.textContent = \"\";\n      }\n    }, 300);\n  };\n  const typeText = (element, text, callback) => {\n    let index = 0;\n    let interval = setInterval(() => {\n      if (index < text.length) {\n        element.innerHTML += text.charAt(index);\n        document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n        ++index;\n      } else {\n        clearInterval(interval);\n        if (callback) callback();\n      }\n    }, 20);\n  };\n  const generateEmailPrompt = conversationHistory => {\n    return `\n      You are a helpful assistant. Based on the following conversation history, generate a detailed and polite email for a Virginia Tech advisor. The email should be written from the perspective of a Virginia Tech student asking for more information or assistance based on their enquiry.\n\n      Conversation History: ${conversationHistory.map(message => {\n      return `\\n${message.role === 'user' ? 'User' : 'Assistant'}: ${message.content}`;\n    }).join('')}\n\n      The name of the student is ${studentName}\n\n      Please ensure the email includes:\n      - A formal greeting.\n      - A clear and detailed description of the student's enquiry.\n      - Relevant details or context that the student has provided.\n      - A polite closing statement thanking the advisor for their time and asking for more detailed information or assistance.\n      - Keep it short and professional\n\n      The email should be structured formally and professionally, appropriate for a university setting.\n    `;\n  };\n  const handleYesNoButtons = (replyText, uniqueId) => {\n    if (replyText.toLowerCase().includes(\"help\")) {\n      const yesButton = document.createElement(\"button\");\n      yesButton.className = \"yes-button\";\n      yesButton.textContent = \"Yes\";\n      const noButton = document.createElement(\"button\");\n      noButton.className = \"no-button\";\n      noButton.textContent = \"No\";\n      const buttonContainer = document.createElement(\"div\");\n      buttonContainer.id = \"button-container\";\n      buttonContainer.appendChild(yesButton);\n      buttonContainer.appendChild(noButton);\n      document.querySelector(`.${styles.chatContainer}`).appendChild(buttonContainer);\n      document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n      noButton.addEventListener(\"click\", () => {\n        const noMessage = {\n          role: 'user',\n          content: \"No\"\n        };\n        setMessages([...messages, noMessage]);\n        setMessageHistory([...messageHistory, noMessage]);\n        document.querySelector(`#${uniqueId}`).textContent = \"Thank you! Please let me know if you have more questions.\";\n        document.getElementById(\"button-container\").remove();\n      });\n      yesButton.addEventListener(\"click\", () => {\n        const yesMessage = {\n          role: 'user',\n          content: \"Yes\"\n        };\n        setMessages([...messages, yesMessage]);\n        setMessageHistory([...messageHistory, yesMessage]);\n        const responseDiv = document.createElement(\"div\");\n        responseDiv.id = \"bot-message\";\n        responseDiv.innerHTML = chatStripe(true, \"Would you like to email the advisor or continue the conversation?\", uniqueId);\n        const emailButton = document.createElement(\"button\");\n        emailButton.className = \"response-button\";\n        emailButton.textContent = \"Email Advisor\";\n        const askMindcraftButton = document.createElement(\"button\");\n        askMindcraftButton.className = \"response-button\";\n        askMindcraftButton.textContent = \"Continue Chat\";\n        document.getElementById(\"button-container\").remove();\n        responseDiv.appendChild(document.createElement(\"br\"));\n        responseDiv.appendChild(emailButton);\n        responseDiv.appendChild(askMindcraftButton);\n        document.querySelector(`.${styles.chatContainer}`).appendChild(responseDiv);\n        document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n        emailButton.addEventListener(\"click\", async () => {\n          const emailMessage = {\n            role: 'user',\n            content: \"Yes, Please help me email my advisor\"\n          };\n          setMessages([...messages, emailMessage]);\n          setMessageHistory([...messageHistory, emailMessage]);\n          const emailPrompt = generateEmailPrompt(messageHistory);\n          const emailResponse = await sendMessageToChatGPT([{\n            role: \"user\",\n            content: emailPrompt\n          }]);\n          const subjectMatch = emailResponse.match(/Subject: (.*)\\n/);\n          const subject = subjectMatch ? subjectMatch[1] : \"Inquiry\";\n          const body = emailResponse.replace(/Subject: .*?\\n/, \"\");\n          const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n          window.location.href = mailtoLink;\n          document.getElementById(\"bot-message\").remove();\n          const finalMessage = {\n            role: 'assistant',\n            content: \"Hope I answered your question. Please let me know if you have more questions\"\n          };\n          setMessages([...messages, finalMessage]);\n          setMessageHistory([...messageHistory, finalMessage]);\n        });\n        askMindcraftButton.addEventListener(\"click\", () => {\n          const askMindcraftMessage = {\n            role: 'user',\n            content: \"Continue chat\"\n          };\n          setMessages([...messages, askMindcraftMessage]);\n          setMessageHistory([...messageHistory, askMindcraftMessage]);\n          const finalMessage = {\n            role: 'assistant',\n            content: \"Please provide more details or ask another question.\"\n          };\n          setMessages([...messages, finalMessage]);\n          setMessageHistory([...messageHistory, finalMessage]);\n          document.getElementById(\"bot-message\").remove();\n        });\n      });\n    }\n  };\n  const showLoading = () => {\n    document.getElementById('loading').style.display = 'flex';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chatPage,\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"loading\",\n        style: {\n          position: 'fixed',\n          width: '100%',\n          height: '100%',\n          top: 0,\n          left: 0,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          background: '#861F41',\n          zIndex: 1000\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: dalleBot,\n          id: styles.loadingImage,\n          alt: \"loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: styles.app,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: styles.header,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            id: styles.homeButton,\n            onClick: handleHomeClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: homeIcon,\n              alt: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            id: styles.chatHeader,\n            children: \"MindCraft VT Chatbot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: styles.categorySelector,\n            defaultValue: category,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"socialLife\",\n              children: \"Social Life\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"academia\",\n              children: \"Academia\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"wellness\",\n              children: \"Wellness\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"tutor\",\n              children: \"Tutor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: styles.chatContainer,\n          className: styles.chatContainer,\n          children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${styles.wrapper} ${msg.role === 'assistant' ? styles.ai : ''}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.chat,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.profile,\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: msg.role === 'assistant' ? dalleBot : user,\n                  alt: msg.role\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 362,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.message,\n                id: msg.id,\n                children: msg.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            name: \"prompt\",\n            required: true,\n            rows: \"1\",\n            cols: \"1\",\n            placeholder: \"Ask MindCraft VT...\",\n            value: input,\n            onChange: e => setInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            id: styles.submitButton,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: sendButton,\n              alt: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 325,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatPage, \"oiaQFOw4EzqrR1P9TR2tJlK/VJc=\", false, function () {\n  return [useParams, useLocation, useNavigate];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useNavigate","useParams","homeIcon","dalleBot","sendButton","styles","user","ChatPage","category","location","navigate","prompt","state","input","setInput","messages","setMessages","messageHistory","setMessageHistory","quest","setQuest","studentName","loadingElement","document","getElementById","setTimeout","style","display","initialChatGPT","console","log","urlParams","URLSearchParams","window","search","currentChatbot","getChatbotFromPrompt","String","selector","value","selectedIndex","prompt_url","get","handleHomeClick","showLoading","handleSubmit","e","preventDefault","trim","newMessage","role","content","handleChatGPT","message","uniqueId","generateUniqueId","id","prevMessages","concat","response","sendMessageToChatGPT","updatedMessages","index","findIndex","msg","typeText","handleYesNoButtons","prevHistory","initialPrompt","initialMessage","InitialMessageToChatGPT","promptMessages","fetch","method","headers","body","JSON","stringify","model","data","json","choices","length","replyText","chatbotMapping","urlPrompt","key","includes","timestamp","Date","now","randomNumber","Math","random","hexadecimalString","toString","chatStripe","ai_bool","ai","loader","element","textContent","loadInterval","setInterval","text","callback","interval","innerHTML","charAt","querySelector","chatContainer","scrollTop","scrollHeight","clearInterval","generateEmailPrompt","conversationHistory","map","join","toLowerCase","yesButton","createElement","className","noButton","buttonContainer","appendChild","addEventListener","noMessage","remove","yesMessage","responseDiv","emailButton","askMindcraftButton","emailMessage","emailPrompt","emailResponse","subjectMatch","match","subject","replace","mailtoLink","encodeURIComponent","href","finalMessage","askMindcraftMessage","chatPage","position","width","height","top","left","justifyContent","alignItems","background","zIndex","loadingImage","app","header","homeButton","chatHeader","categorySelector","wrapper","chat","profile","target","submitButton"],"sources":["/Users/roshanravindran/Downloads/MERN_Login_App_with_ResetEmail-Main/client/src/components/ChatPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport homeIcon from '../assets/home.png';\nimport dalleBot from '../assets/dalle_bot.jpg';\nimport sendButton from '../assets/send_button.png';\nimport styles from '../styles/ChatPage.module.css';\nimport user from '../assets/vt_student.jpg';\n\nconst ChatPage = () => {\n  const { category } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { prompt } = location.state || {};\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [messageHistory, setMessageHistory] = useState([]);\n  const [quest, setQuest] = useState('');\n  const studentName = \"Roshan Ravindran\";\n\n  useEffect(() => {\n    const loadingElement = document.getElementById('loading');\n    setTimeout(() => {\n      if (loadingElement) loadingElement.style.display = 'none';\n    }, 1500);\n\n    if (prompt) {\n      initialChatGPT(prompt);\n      console.log(\"the prompt is\" + prompt)\n    }\n  }, [prompt]);\n  useEffect(() => {\n    console.log(\"Message History Updated:\", messageHistory);\n  }, [messageHistory]);\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const currentChatbot = getChatbotFromPrompt(String(urlParams));\n    const selector = document.getElementById('category-selector');\n\n    if (selector) {\n      if (currentChatbot) {\n        selector.value = currentChatbot;\n      } else {\n        selector.selectedIndex = 0;\n      }\n    }\n\n    const prompt_url = urlParams.get('prompt');\n    if (prompt_url) {\n      setQuest(prompt_url);\n    }\n  }, []);\n\n  const handleHomeClick = () => {\n    showLoading();\n    setTimeout(() => {\n      navigate('/chatbot');\n    }, 1500);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    console.log(\"clicked on the submit button\")\n    if (input.trim() === \"\") {\n      return;\n    }\n\n    const newMessage = { role: 'user', content: input };\n    console.log(\"input\" + newMessage.role + newMessage.content)\n    setMessages([...messages, newMessage]);\n    setMessageHistory([...messageHistory, newMessage]);\n    setInput('');\n\n    await handleChatGPT(input);\n  };\n\n  const handleChatGPT = async (message) => {\n    const uniqueId = generateUniqueId();\n    const newMessage = { role: 'assistant', content: 'Loading...', id: uniqueId };\n    setMessages((prevMessages) => [...prevMessages, newMessage]);\n    messageHistory.concat([{ role: 'user', content: message }])\n\n    const response = await sendMessageToChatGPT(messageHistory.concat([{ role: 'user', content: message }]));\n\n    setMessages((prevMessages) => {\n      const updatedMessages = [...prevMessages];\n      const index = updatedMessages.findIndex(msg => msg.id === uniqueId);\n      if (index !== -1) {\n        updatedMessages[index].content = '';\n        typeText(document.getElementById(uniqueId), response, () => handleYesNoButtons(response, uniqueId));\n      }\n      return updatedMessages;\n    });\n\n    setMessageHistory((prevHistory) => [...prevHistory, { role: 'assistant', content: response }]);\n  };\n\n  const initialChatGPT = async (initialPrompt) => {\n    setQuest(initialPrompt);\n    const initialMessage = { role: 'system', content: initialPrompt };\n\n    setMessages([{ role: 'assistant', content: 'Loading...' }]);\n    setMessageHistory([initialMessage]);\n    const response = await InitialMessageToChatGPT(initialPrompt);\n    setMessages([{ role: 'assistant', content: response }]);\n    setMessageHistory([...messageHistory, { role: 'assistant', content: response }]);\n    // setMessageHistory([{ role: 'assistant', content: response }]);\n  };\n\n  const sendMessageToChatGPT = async (promptMessages) => {\n    console.log(\"after updating\" , promptMessages);\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer sk-proj-Ujro97vuIFi0BvhkpHnET3BlbkFJ2eiNRzcGGHMHfman9iiE'\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: promptMessages\n      })\n    });\n    const data = await response.json();\n    if (data.choices && data.choices.length > 0) {\n      const replyText = data.choices[0].message.content;\n      return replyText;\n    } else {\n      return \"Failed to get a response\";\n    }\n  };\n\n  const InitialMessageToChatGPT = async (quest) => {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer sk-proj-ClyheMv50nSvIf1Q3g84T3BlbkFJoZ6isdGyOQEQcCm8GlzN'\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: [{ role: \"system\", content: quest }]\n      })\n    });\n    const data = await response.json();\n    if (data.choices && data.choices.length > 0) {\n      const replyText = data.choices[0].message.content;\n      return replyText;\n    } else {\n      return \"Failed to get a response\";\n    }\n  };\n\n  const chatbotMapping = {\n    'Social': 'socialLife',\n    'Academia': 'academia',\n    'Wellness': 'wellness',\n    'tutor': 'tutor'\n  };\n\n  const getChatbotFromPrompt = (urlPrompt) => {\n    for (const key in chatbotMapping) {\n      if (urlPrompt.includes(key)) {\n        return chatbotMapping[key];\n      }\n    }\n    return null;\n  };\n\n  const generateUniqueId = () => {\n    const timestamp = Date.now();\n    const randomNumber = Math.random();\n    const hexadecimalString = randomNumber.toString(16);\n\n    return `id-${timestamp}-${hexadecimalString}`;\n  };\n\n  const chatStripe = (ai_bool, value, uniqueId) => {\n    return `\n      <div class=\"wrapper ${ai_bool ? styles.ai : ''}\">\n        <div class=\"chat\">\n          <div class=\"profile\">\n            <img\n              src=\"${ai_bool ? dalleBot : user}\"\n              alt=\"${ai_bool ? \"bot\" : \"user\"}\"\n            />\n          </div>\n          <div class=\"message\" id=${uniqueId}>${value}</div>\n        </div>\n      </div>\n    `;\n  };\n\n  const loader = (element) => {\n    element.textContent = \"\";\n    let loadInterval = setInterval(() => {\n      element.textContent += \".\";\n      if (element.textContent === \"....\") {\n        element.textContent = \"\";\n      }\n    }, 300);\n  };\n\n  const typeText = (element, text, callback) => {\n    let index = 0;\n    let interval = setInterval(() => {\n      if (index < text.length) {\n        element.innerHTML += text.charAt(index);\n        document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n        ++index;\n      } else {\n        clearInterval(interval);\n        if (callback) callback();\n      }\n    }, 20);\n  };\n\n  const generateEmailPrompt = (conversationHistory) => {\n    return `\n      You are a helpful assistant. Based on the following conversation history, generate a detailed and polite email for a Virginia Tech advisor. The email should be written from the perspective of a Virginia Tech student asking for more information or assistance based on their enquiry.\n\n      Conversation History: ${conversationHistory.map(message => {\n        return `\\n${message.role === 'user' ? 'User' : 'Assistant'}: ${message.content}`;\n      }).join('')}\n\n      The name of the student is ${studentName}\n\n      Please ensure the email includes:\n      - A formal greeting.\n      - A clear and detailed description of the student's enquiry.\n      - Relevant details or context that the student has provided.\n      - A polite closing statement thanking the advisor for their time and asking for more detailed information or assistance.\n      - Keep it short and professional\n\n      The email should be structured formally and professionally, appropriate for a university setting.\n    `;\n  };\n\n  const handleYesNoButtons = (replyText, uniqueId) => {\n    if (replyText.toLowerCase().includes(\"help\")) {\n      const yesButton = document.createElement(\"button\");\n      yesButton.className = \"yes-button\";\n      yesButton.textContent = \"Yes\";\n      const noButton = document.createElement(\"button\");\n      noButton.className = \"no-button\";\n      noButton.textContent = \"No\";\n\n      const buttonContainer = document.createElement(\"div\");\n      buttonContainer.id = \"button-container\";\n      buttonContainer.appendChild(yesButton);\n      buttonContainer.appendChild(noButton);\n      document.querySelector(`.${styles.chatContainer}`).appendChild(buttonContainer);\n\n      document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n\n      noButton.addEventListener(\"click\", () => {\n        const noMessage = { role: 'user', content: \"No\" };\n        setMessages([...messages, noMessage]);\n        setMessageHistory([...messageHistory, noMessage]);\n        document.querySelector(`#${uniqueId}`).textContent = \"Thank you! Please let me know if you have more questions.\";\n        document.getElementById(\"button-container\").remove();\n      });\n\n      yesButton.addEventListener(\"click\", () => {\n        const yesMessage = { role: 'user', content: \"Yes\" };\n        setMessages([...messages, yesMessage]);\n        setMessageHistory([...messageHistory, yesMessage]);\n        const responseDiv = document.createElement(\"div\");\n        responseDiv.id = \"bot-message\";\n        responseDiv.innerHTML = chatStripe(true, \"Would you like to email the advisor or continue the conversation?\", uniqueId);\n\n        const emailButton = document.createElement(\"button\");\n        emailButton.className = \"response-button\";\n        emailButton.textContent = \"Email Advisor\";\n        const askMindcraftButton = document.createElement(\"button\");\n        askMindcraftButton.className = \"response-button\";\n        askMindcraftButton.textContent = \"Continue Chat\";\n        document.getElementById(\"button-container\").remove();\n\n        responseDiv.appendChild(document.createElement(\"br\"));\n        responseDiv.appendChild(emailButton);\n        responseDiv.appendChild(askMindcraftButton);\n\n        document.querySelector(`.${styles.chatContainer}`).appendChild(responseDiv);\n        document.querySelector(`.${styles.chatContainer}`).scrollTop = document.querySelector(`.${styles.chatContainer}`).scrollHeight;\n\n        emailButton.addEventListener(\"click\", async () => {\n          const emailMessage = { role: 'user', content: \"Yes, Please help me email my advisor\" };\n          setMessages([...messages, emailMessage]);\n          setMessageHistory([...messageHistory, emailMessage]);\n\n          const emailPrompt = generateEmailPrompt(messageHistory);\n          const emailResponse = await sendMessageToChatGPT([{ role: \"user\", content: emailPrompt }]);\n          const subjectMatch = emailResponse.match(/Subject: (.*)\\n/);\n          const subject = subjectMatch ? subjectMatch[1] : \"Inquiry\";\n          const body = emailResponse.replace(/Subject: .*?\\n/, \"\");\n\n          const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n          window.location.href = mailtoLink;\n\n          document.getElementById(\"bot-message\").remove();\n          const finalMessage = { role: 'assistant', content: \"Hope I answered your question. Please let me know if you have more questions\" };\n          setMessages([...messages, finalMessage]);\n          setMessageHistory([...messageHistory, finalMessage]);\n        });\n\n        askMindcraftButton.addEventListener(\"click\", () => {\n          const askMindcraftMessage = { role: 'user', content: \"Continue chat\" };\n          setMessages([...messages, askMindcraftMessage]);\n          setMessageHistory([...messageHistory, askMindcraftMessage]);\n\n          const finalMessage = { role: 'assistant', content: \"Please provide more details or ask another question.\" };\n          setMessages([...messages, finalMessage]);\n          setMessageHistory([...messageHistory, finalMessage]);\n          document.getElementById(\"bot-message\").remove();\n        });\n      });\n    }\n  };\n\n  const showLoading = () => {\n    document.getElementById('loading').style.display = 'flex';\n  };\n\n  return (\n    <div className={styles.chatPage}> {/* Apply the scoped class */}\n    <div>\n      <div\n        id=\"loading\"\n        style={{\n          position: 'fixed',\n          width: '100%',\n          height: '100%',\n          top: 0,\n          left: 0,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          background: '#861F41',\n          zIndex: 1000,\n        }}\n      >\n        <img src={dalleBot} id={styles.loadingImage} alt=\"loading\" />\n      </div>\n      <div id={styles.app}>\n        <div id={styles.header}>\n          <button id={styles.homeButton} onClick={handleHomeClick}>\n            <img src={homeIcon} alt=\"Home\" />\n          </button>\n          <h1 id={styles.chatHeader}>MindCraft VT Chatbot</h1>\n          <select id={styles.categorySelector} defaultValue={category}>\n            <option value=\"socialLife\">Social Life</option>\n            <option value=\"academia\">Academia</option>\n            <option value=\"wellness\">Wellness</option>\n            <option value=\"tutor\">Tutor</option>\n          </select>\n        </div>\n        <div id={styles.chatContainer} className={styles.chatContainer}>\n            {messages.map((msg, index) => (\n              <div key={index} className={`${styles.wrapper} ${msg.role === 'assistant' ? styles.ai : ''}`}>\n                <div className={styles.chat}>\n                  <div className={styles.profile}>\n                    <img src={msg.role === 'assistant' ? dalleBot : user} alt={msg.role} />\n                  </div>\n                  <div className={styles.message} id={msg.id}>{msg.content}</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        <form onSubmit={handleSubmit}>\n          <textarea\n            name=\"prompt\"\n            required\n            rows=\"1\"\n            cols=\"1\"\n            placeholder=\"Ask MindCraft VT...\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n          ></textarea>\n          <button type=\"submit\" id={styles.submitButton}>\n            <img src={sendButton} alt=\"Send\" />\n          </button>\n        </form>\n      </div>\n    </div>\n    </div>\n  );\n};\n\nexport default ChatPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}