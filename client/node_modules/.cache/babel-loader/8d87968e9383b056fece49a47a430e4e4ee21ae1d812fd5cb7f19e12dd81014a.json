{"ast":null,"code":"var _jsxFileName = \"/Users/roshanravindran/Downloads/MERN_Login_App_with_ResetEmail-Main/client/src/components/ChatPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport homePng from '../assets/home.png';\nimport dalleBot from '../assets/dalle_bot.jpg';\nimport sendButton from '../assets/send_button.png';\nimport styles from '../styles/ChatPage.module.css';\nimport homeIcon from '../assets/vt_student.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatPage = () => {\n  _s();\n  const {\n    category\n  } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    prompt\n  } = location.state || {};\n  const [input, setInput] = useState('');\n  useEffect(() => {\n    const loadingElement = document.getElementById('loading');\n    setTimeout(() => {\n      if (loadingElement) loadingElement.style.display = 'none';\n    }, 1500);\n  }, []);\n  const handleHomeClick = () => {\n    navigate('/chatbot');\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = document.querySelector(\"form\");\n    const chatContainer = document.querySelector('.${styles.chatContainer}');\n    var quest = ` You are a counselor in the College of Engineering specifically in Computer Science at the real college called Virginia Polytechnic Institute and State University\nor Virginia Tech for short. You specialize in helping students by guiding and giving resources \nabout college work and classes and how to deal with them. \n\nYou will adhere to a consistent style of talking that is appropriate of a professional adult working a college job.\n\nYour task is to provide answers to student's question in the text given as such a counselor by:\n\n1. Start with a greeting to the system by saying:\"Hi! Welcome to Mindcraft VT Assistant! \n\n2. Then say \"Ask me any questions regarding these three topics:\"\n\n3. Answer the user's question in regards to three different categories. Do not display details of categories or info on them. Presume they have some form of idea.\nThis is for your knowledge only. Details below in these categories are to give you a better idea of what each category is specifically about.\nThese categories are:\n\n- Social Life: This is essentially about on going campus events at Virginia Tech, what you can do as a college student on campus in and out of\ncampus and outside in Blacksburg and nearby Christiansburg and Roanoke in Virginia. This also includes how to have fun with friends, groups, joining organizations\nand clubs, and doing all sorts of events and getting involved with extracurriculars. This includes stuff from Gobblerconnect, a website that hosts event listinngs and club/organization listings\nyou can join and in general calendars you can find by email like listserv notifications from organizations, and calendars embedded into the Virginia Tech college website\nand the calendar found on google or others found from related websites\n\n- Academics: This is essentially about courses, information on courses such as knowing what teacher is teaching or general heuristic knowledge about the class like \nwhat they teach and how long each class is. This also can be about how to sign up for such a class, the steps to sign up, prerequisites, among ther logistical knowledge\nthat is involved with courses. This can be about majors, pricing for credits, and anything related to classes, graduation, or a student's learning. This topic can also be\na way to guide students on how to survive classes in general and strategies to survive and thrive in classes. Important deadlines and there important heuristics that \nare constantly updates are listed here.\n\n- Wellness: This is essentially all about resources for students. They can be exisiting outside and inside campus resources. These resources include anything regarding \nmental health, physical health, disability services, food and dietary support, financial aid and support, housing information and costs of living, and anything in general\nthat regards useful everyday resources to help with the students needs that are listed currently on Virginia Tech on the websites and other affiliated resources. \n\nIf they are not in these categories OR they are out of the scope of what you can give users then say:\n\"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \nanswering a different one? If not thank you for using our service!:D\"\n\n4.  The output of your response should be first with a introductory paragraph of what your found. Then in a list format of \nbullet points show all of the options, details, etc in terms of what you were trying to answer, BUT do not do this for most prompts if \nit seems explicitly not needed. Instead if not needed, write in about 4-5 paragraphs explaining what you found. Finally have one final paragraph summarizing \nthe answer you found and then the final question where you ask the user specifically:\n\"Do you need more help?\"\n\n5. Following step 3 for the text \"Does this answer your question?\" If they say anything similar to the word \"Yes\" within context then say:\n\"Hope this was helpful!\" If the user says \"No\", prompt the user by saying: \"Sure! What else do you want to know or need clarification about?\" Proceed\nto then follow the previous steps starting from step 2. Use the question before as guidance and keep on topic. If they give an answer not on or similar to\nsaid topic or within the category then say \"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \nanswering a different one? If not thank you for using our service!:D`;\n    let loadInterval;\n    function loader(element) {\n      element.textContent = \"\";\n      loadInterval = setInterval(() => {\n        element.textContent += \".\";\n        if (element.textContent === \"....\") {\n          element.textContent = \"\";\n        }\n      }, 300);\n    }\n    function typeText(element, text, callback) {\n      let index = 0;\n      let interval = setInterval(() => {\n        if (index < text.length) {\n          element.innerHTML += text.charAt(index);\n          chatContainer.scrollTop = chatContainer.scrollHeight;\n          ++index;\n        } else {\n          clearInterval(interval);\n          if (callback) callback();\n        }\n      }, 20);\n    }\n    const chatbotMapping = {\n      'Social': 'socialLife',\n      'Academia': 'academia',\n      'Wellness': 'wellness',\n      'tutor': 'tutor'\n    };\n    function getChatbotFromPrompt(urlPrompt) {\n      for (const key in chatbotMapping) {\n        if (urlPrompt.includes(key)) {\n          return chatbotMapping[key];\n        }\n      }\n      return null;\n    }\n    document.addEventListener('DOMContentLoaded', async function () {\n      const urlParams = new URLSearchParams(window.location.search);\n      const currentChatbot = getChatbotFromPrompt(String(urlParams));\n      console.log(\"type of bot\" + currentChatbot);\n      const selector = document.getElementById('category-selector');\n      console.log(\"type of sekec\" + selector);\n      if (currentChatbot) {\n        console.log(\"ENTERED PLEASEE\" + currentChatbot);\n        selector.value = currentChatbot;\n        console.log(selector.value);\n      } else {\n        selector.selectedIndex = 0;\n      }\n      const data = new FormData(form);\n      const prompt_url = urlParams.get('prompt');\n      console.log(prompt_url);\n      quest = prompt_url;\n\n      // if (prompt === \"\") {\n      //   form.reset();\n      //   return;\n      // }\n      // user's chatstripe\n      // chatContainer.innerHTML += chatStripe(false, prompt);\n\n      form.reset();\n\n      // bot's chatstripe, initially blank\n      const uniqueId = generateUniqueId();\n      chatContainer.innerHTML += chatStripe(true, \" \", uniqueId);\n      chatContainer.scrollTop = chatContainer.scrollHeight;\n      const messageDiv = document.getElementById(uniqueId);\n      loader(messageDiv);\n      try {\n        const chatGPTResponse = await InitialMessageToChatGPT(quest);\n        clearInterval(loadInterval);\n        messageDiv.innerHTML = \"\";\n        if (chatGPTResponse.choices && chatGPTResponse.choices.length > 0) {\n          const replyText = chatGPTResponse.choices[0].message.content;\n          typeText(messageDiv, replyText);\n        } else {\n          messageDiv.innerHTML = \"Failed to get a response\";\n        }\n      } catch (error) {\n        clearInterval(loadInterval);\n        messageDiv.innerHTML = \"Error: \" + error.toString();\n        console.error(\"Error when calling OpenAI:\", error);\n      }\n    });\n    function formatText(text) {\n      // Replace markdown bold with HTML <strong> tag\n      text = text.replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>');\n\n      // Replace markdown links with HTML <a> tags\n      text = text.replace(/\\[([^\\]]+)\\]\\((http[^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\">$1</a>');\n      return text;\n    }\n    function generateUniqueId() {\n      const timestamp = Date.now();\n      const randomNumber = Math.random();\n      const hexadecimalString = randomNumber.toString(16);\n      return `id-${timestamp}-${hexadecimalString}`;\n    }\n    function chatStripe(ai_bool, value, uniqueId) {\n      return `\n    <div class=\"wrapper ${ai_bool && \"ai\"}\">\n      <div class=\"chat\">\n        <div class=\"profile\">\n          <img\n            src=\"${ai_bool ? dalleBot : user}\"\n            alt=\"${ai_bool ? \"bot\" : \"user\"}\"\n          />\n        </div>\n        <div class=\"message\" id=${uniqueId}>${value}</div>\n      </div>\n    </div>\n  `;\n    }\n    const handleSubmit = async e => {\n      e.preventDefault();\n      const data = new FormData(form);\n      const prompt = data.get(\"prompt\").trim();\n      if (prompt === \"\") {\n        form.reset();\n        return;\n      }\n\n      // user's chatstripe\n      chatContainer.innerHTML += chatStripe(false, prompt);\n      form.reset();\n      const uniqueId = generateUniqueId();\n      chatContainer.innerHTML += chatStripe(true, \" \", uniqueId);\n      chatContainer.scrollTop = chatContainer.scrollHeight;\n      const messageDiv = document.getElementById(uniqueId);\n      loader(messageDiv);\n      try {\n        console.log('hii');\n        const chatGPTResponse = await sendMessageToChatGPT(prompt);\n        clearInterval(loadInterval);\n        messageDiv.innerHTML = \"\"; // Clear loader\n        if (chatGPTResponse.choices && chatGPTResponse.choices.length > 0) {\n          const replyText = chatGPTResponse.choices[0].message.content;\n          typeText(messageDiv, replyText, () => {\n            messageHistory.push({\n              role: \"assistant\",\n              content: replyText\n            });\n            console.log(replyText);\n            if (replyText.toLowerCase().includes(\"help\")) {\n              console.log(\"HI IM INNNNNN!!!!\");\n              const yesButton = document.createElement(\"button\");\n              yesButton.className = \"yes-button\";\n              yesButton.textContent = \"Yes\";\n              const noButton = document.createElement(\"button\");\n              noButton.className = \"no-button\";\n              noButton.textContent = \"No\";\n              const buttonContainer = document.createElement(\"div\");\n              buttonContainer.id = \"button-container\";\n              buttonContainer.appendChild(yesButton);\n              buttonContainer.appendChild(noButton);\n              chatContainer.appendChild(buttonContainer);\n              chatContainer.scrollTop = chatContainer.scrollHeight;\n              console.log(\"HTML before clicking Yes button:\");\n              console.log(document.documentElement.outerHTML);\n              noButton.addEventListener(\"click\", () => {\n                chatContainer.innerHTML += chatStripe(false, \"No\", uniqueId);\n                chatContainer.innerHTML += chatStripe(true, \"Thank you! Please let me know if you have more questions.\", uniqueId);\n                // chatContainer.appendChild(responseDiv);\n                chatContainer.scrollTop = chatContainer.scrollHeight;\n                document.getElementById(\"button-container\").remove();\n                console.log(\"HTML AFTER clicking Yes button:\");\n                console.log(document.documentElement.outerHTML);\n              });\n              yesButton.addEventListener(\"click\", () => {\n                chatContainer.innerHTML += chatStripe(false, \"Yes\", uniqueId);\n                const responseDiv = document.createElement(\"div\");\n                responseDiv.id = \"bot-message\";\n                chatContainer.innerHTML += chatStripe(true, \"Would you like to email the advisor or continue the conversation?\", uniqueId);\n                const emailButton = document.createElement(\"button\");\n                emailButton.className = \"response-button\";\n                emailButton.textContent = \"Email Advisor\";\n                const askMindcraftButton = document.createElement(\"button\");\n                askMindcraftButton.className = \"response-button\";\n                askMindcraftButton.textContent = \"Continue Chat\";\n                document.getElementById(\"button-container\").remove();\n                responseDiv.appendChild(document.createElement(\"br\")); // Add line break\n                responseDiv.appendChild(emailButton);\n                responseDiv.appendChild(askMindcraftButton);\n                chatContainer.appendChild(responseDiv);\n                chatContainer.scrollTop = chatContainer.scrollHeight;\n                buttonContainer.remove();\n                emailButton.addEventListener(\"click\", async () => {\n                  chatContainer.innerHTML += chatStripe(false, \"Yes, Please help me email my advisor\", uniqueId);\n                  const emailPrompt = generateEmailPrompt(messageHistory);\n                  // const emailResponse = await sendMessageToChatGPT(emailPrompt, []);\n                  const response = await fetch('https://api.openai.com/v1/chat/completions', {\n                    method: 'POST',\n                    headers: {\n                      'Content-Type': 'application/json',\n                      'Authorization': 'Bearer sk-proj-Ujro97vuIFi0BvhkpHnET3BlbkFJ2eiNRzcGGHMHfman9iiE'\n                    },\n                    body: JSON.stringify({\n                      model: \"gpt-3.5-turbo\",\n                      messages: [{\n                        role: \"user\",\n                        content: emailPrompt\n                      }]\n                    })\n                  });\n                  const emailResponse = await response.json();\n                  // if (data.choices && data.choices.length > 0) {\n                  //   const emailContent = data.choices[0].message.content;\n                  //   // messageHistory.push({ role: \"assistant\", content: replyText }); // Add bot reply to history\n                  // }\n                  const emailContent = await emailResponse.choices[0].message.content;\n                  const subjectMatch = emailContent.match(/Subject: (.*)\\n/);\n                  const subject = subjectMatch ? subjectMatch[1] : \"Inquiry\";\n                  const body = emailContent.replace(/Subject: .*?\\n/, \"\");\n                  const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n                  window.location.href = mailtoLink;\n                  document.getElementById(\"bot-message\").remove();\n                  chatContainer.innerHTML += chatStripe(true, \"Hope I answered your question. Please let me know if you have more questions\", uniqueId);\n                });\n                askMindcraftButton.addEventListener(\"click\", () => {\n                  const askMindcraftMessageDiv = document.createElement(\"div\");\n                  chatContainer.innerHTML += chatStripe(false, \"Continue chat\", uniqueId);\n                  askMindcraftMessageDiv.className = \"bot-message\";\n                  chatContainer.innerHTML += chatStripe(true, \"Please provide more details or ask another question.\", uniqueId);\n                  chatContainer.appendChild(askMindcraftMessageDiv);\n                  chatContainer.scrollTop = chatContainer.scrollHeight;\n                  document.getElementById(\"bot-message\").remove();\n                });\n              });\n            }\n          });\n        } else {\n          messageDiv.innerHTML = \"Failed to get a response\";\n        }\n      } catch (error) {\n        clearInterval(loadInterval);\n        messageDiv.innerHTML = \"Error: \" + error.toString();\n        console.error(\"Error when calling OpenAI:\", error);\n      }\n    };\n    form.addEventListener(\"submit\", handleSubmit);\n    form.addEventListener(\"submit\", handleSubmit);\n    form.addEventListener(\"keyup\", e => {\n      if (\"keyup\" === 13) {\n        handleSubmit(e);\n      }\n    });\n    async function sendMessageToChatGPT(prompt) {\n      messageHistory.push({\n        role: \"user\",\n        content: prompt\n      });\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer sk-proj-Ujro97vuIFi0BvhkpHnET3BlbkFJ2eiNRzcGGHMHfman9iiE'\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          messages: messageHistory\n        })\n      });\n      const data = await response.json();\n      if (data.choices && data.choices.length > 0) {\n        const replyText = data.choices[0].message.content;\n        messageHistory.push({\n          role: \"assistant\",\n          content: replyText\n        }); // Add bot reply to history\n      }\n\n      return data;\n    }\n    let messageHistory = [];\n    async function InitialMessageToChatGPT(quest) {\n      chatContainer.innerHTML = '';\n      messageHistory = [];\n      const initialPrompt = quest;\n      messageHistory.push({\n        role: \"system\",\n        content: initialPrompt\n      });\n      console.log(messageHistory);\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer sk-proj-ClyheMv50nSvIf1Q3g84T3BlbkFJoZ6isdGyOQEQcCm8GlzN'\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          messages: messageHistory\n        })\n      });\n      const data = await response.json();\n      if (data.choices && data.choices.length > 0) {\n        const replyText = data.choices[0].message.content;\n        const uniqueId = generateUniqueId();\n        chatContainer.innerHTML += chatStripe(true, replyText, uniqueId);\n        messageHistory.push({\n          role: \"assistant\",\n          content: replyText\n        });\n      } else {\n        console.error(\"Failed to get a valid response from the API.\");\n        chatContainer.innerHTML += `<div>Error: Failed to get a response from the assistant.</div>`;\n      }\n      return data;\n    }\n    document.addEventListener('DOMContentLoaded', function () {\n      const categorySelector = document.getElementById('category-selector');\n      categorySelector.addEventListener('change', function () {\n        console.log(\"AFTER \" + this.value);\n        if (this.value) {\n          setPromptForCategory(this.value);\n        }\n      });\n      const buttons = document.querySelectorAll('.button');\n      buttons.forEach(button => {\n        button.addEventListener('click', function () {\n          const category = this.getAttribute('id').replace('Btn', '');\n          setPromptForCategory(category);\n        });\n      });\n    });\n    const studentName = \"Roshan Ravindran\";\n    const generateEmailPrompt = conversationHistory => {\n      return `\n    You are a helpful assistant. Based on the following conversation history, generate a detailed and polite email for a Virginia Tech advisor. The email should be written from the perspective of a Virginia Tech student asking for more information or assistance based on their enquiry.\n\n    Conversation History: ${conversationHistory.map(message => {\n        return `\\n${message.role === 'user' ? 'User' : 'Assistant'}: ${message.content}`;\n      }).join('')}\n\n    The name of the student is ${studentName}\n\n    Please ensure the email includes:\n    - A formal greeting.\n    - A clear and detailed description of the student's enquiry.\n    - Relevant details or context that the student has provided.\n    - A polite closing statement thanking the advisor for their time and asking for more detailed information or assistance.\n    - Keep it short and professional\n\n    The email should be structured formally and professionally, appropriate for a university setting.\n  `;\n    };\n    function setPromptForCategory(category) {\n      let prompt;\n      switch (category) {\n        case 'socialLife':\n          prompt = `You are a college life coordinator for the real college called Virginia Polytechnic Institute and State University\n          or Virginia Tech for short. Your job is to link resources and/or talk about activities you can do on campus in regards to social life.\n          Your are essentially pulling information about ongoing campus events at Virginia Tech, what you can do as a college student on campus in and out of\n          campus and outside in Blacksburg and nearby Christiansburg and Roanoke in Virginia. This also includes how to have fun with friends, groups, joining organizations\n          and clubs, and doing all sorts of events and getting involved with extracurriculars. This includes stuff from \n          Gobblerconnect, a website that hosts event listinngs and club/organization listings\n          you can join and in general calendars you can find by email like listserv notifications from organizations, and calendars embedded into the Virginia Tech college website\n          and the calendar found on google or others found from related websites\n          \n          You will adhere to a consistent style of talking that is appropriate of a professional adult working a college job.\n          \n          You also are able to access the Internet to get links. Make sure they are working links and will not result in a 404 error.\n          \n          Your task is to provide answers to student's question in the text given as a college life coordinator by:\n          \n          1. Start with a greeting to the user by saying:\"Hi! Welcome to Mindcraft VT Assistant! My name is Mindcraft VT Social Life Assistant! What is/are your question(s) for today?\n          \n          2. Take the user input of the question and answer to the best of your abilities including adding links that users can click \n          \n          3. If they are not in these categories OR they are out of the scope of what you can give users then say:\n          \"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \n          answering a different one? If not thank you for using our service!:D\" \n          \n          4.  The output of your response should be first with a introductory paragraph of what your found. Then in a list format of \n          bullet points show all of the options, details, etc in terms of what you were trying to answer, BUT do not do this for most prompts if \n          it seems explicitly not needed. Instead if not needed, write in about 4-5 paragraphs explaining what you found. Finally have one final paragraph summarizing \n          the answer you found and then the final question where you ask the user specifically:\n          \"Do you need more help?\"\n          \n          5. Following step 4 for the text \"Does this answer your question?\" If they say anything similar to the word \"Yes\" within context then say:\n          \"Hope this was helpful!\" If the user says \"No\", prompt the user by saying: \"Sure! What else do you want to know or need clarification about?\" Proceed\n          to then follow the previous steps starting from step 2. Use the question before as guidance and keep on topic. If they give an answer not on or similar to\n          said topic or within the category then say \"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \n          answering a different one? If not thank you for using our service!:D`;\n          break;\n        case 'academia':\n          prompt = `You are a academic advisor for the real college called Virginia Polytechnic Institute and State University\n          or Virginia Tech for short. Your information is all essentially about courses, information on courses such as knowing what teacher is teaching or general heuristic knowledge about the class like \n          what they teach and how long each class is. This also can be about how to sign up for such a class, the steps to sign up, prerequisites, among ther logistical knowledge\n          that is involved with courses. This can be about majors, pricing for credits, and anything related to classes, graduation, or a student's learning. This topic can also be\n          a way to guide students on how to survive classes in general and strategies to survive and thrive in classes. Important deadlines and there important heuristics that \n          are constantly updates are listed here.\n          \n          You will adhere to a consistent style of talking that is appropriate of a professional adult working a college job.\n          \n          You also are able to access the Internet to get links. Make sure they are working links and will not result in a 404 error.\n          \n          Your task is to provide answers to student's question in the text given as a academic advisor by:\n          \n          1. Start with a greeting to the user by saying:\"Hi! Welcome to Mindcraft VT Assistant! My name is Mindcraft VT Academia Assistant! What is/are your question(s) for today?\n          \n          2. Take the user input of the question and answer to the best of your abilities including adding links that users can click \n          \n          3. If they are not in these categories OR they are out of the scope of what you can give users then say:\n          \"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \n          answering a different one? If not thank you for using our service!:D\" \n          \n          4.  The output of your response should be first with a introductory paragraph of what your found. Then in a list format of \n          bullet points show all of the options, details, etc in terms of what you were trying to answer, BUT do not do this for most prompts if \n          it seems explicitly not needed. Instead if not needed, write in about 4-5 paragraphs explaining what you found. Finally have one final paragraph summarizing \n          the answer you found and then the final question where you ask the user specifically:\n          \"Do you need more help?\"\n          \n          5. Following step 4 for the text \"Does this answer your question?\" If they say anything similar to the word \"Yes\" within context then say:\n          \"Hope this was helpful!\" If the user says \"No\", prompt the user by saying: \"Sure! What else do you want to know or need clarification about?\" Proceed\n          to then follow the previous steps starting from step 2. Use the question before as guidance and keep on topic. If they give an answer not on or similar to\n          said topic or within the category then say \"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \n          answering a different one? If not thank you for using our service!:D`;\n          break;\n        case 'wellness':\n          prompt = `You are a embedded college counselor for the real college called Virginia Polytechnic Institute and State University\n          or Virginia Tech for short. Your information is all essentially about resources for students. They can be exisiting outside resources around Blacksburg, Christiansburg, and Roanoke and inside campus resources. These resources include anything regarding \n          mental health, physical health, disability services, food and dietary support, financial aid and support, housing information and costs of living, and anything in general\n          that regards useful everyday resources to help with the students needs that are listed currently on Virginia Tech on the websites and other affiliated resources. \n          \n          You will adhere to a consistent style of talking that is appropriate of a professional adult working a college job.\n          \n          You also are able to access the Internet to get links. Make sure they are working links and will not result in a 404 error.\n          \n          Your task is to provide answers to student's question in the text given as a embedded college counselor by:\n          \n          1. Start with a greeting to the user by saying:\"Hi! Welcome to Mindcraft VT Assistant! My name is Mindcraft VT Wellness Assistant! What is/are your question(s) for today?\n          \n          2. Take the user input of the question and answer to the best of your abilities including adding links that users can click \n          \n          3. If they are not in these categories OR they are out of the scope of what you can give users then say:\n          \"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \n          answering a different one? If not thank you for using our service!:D\" \n          \n          4.  The output of your response should be first with a introductory paragraph of what your found. Then in a list format of \n          bullet points show all of the options, details, etc in terms of what you were trying to answer, BUT do not do this for most prompts if \n          it seems explicitly not needed. Instead if not needed, write in about 4-5 paragraphs explaining what you found. Finally have one final paragraph summarizing \n          the answer you found and then the final question where you ask the user specifically:\n          \"Do you need more help?\"\n          \n          5. Following step 4 for the text \"Does this answer your question?\" If they say anything similar to the word \"Yes\" within context then say:\n          \"Hope this was helpful!\" If the user says \"No\", prompt the user by saying: \"Sure! What else do you want to know or need clarification about?\" Proceed\n          to then follow the previous steps starting from step 2. Use the question before as guidance and keep on topic. If they give an answer not on or similar to\n          said topic or within the category then say \"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \n          answering a different one? If not thank you for using our service!:D\n          `;\n          break;\n        case 'tutor':\n          prompt = `You lead and have a list of tutors for the real college called Virginia Polytechnic Institute and State University\n          or Virginia Tech for short. Your information is all essentially about giving information for students regarding listed tutors found. \n\n          You will adhere to a consistent style of talking that is appropriate of a professional adult working a college job.\n\n          You also are able to access the Internet to get links. Make sure they are working links and will not result in a 404 error.\n\n          Your task is to provide answers to student's question in the text given as an assitant that holds information regarding college tutorinng by:\n\n          1. Starting with a greeting to the user by saying:\"Hi! Welcome to Mindcraft VT Assistant! My name is Mindcraft VT Tutor Assistant! What is/are your question(s) for today?\n\n          2. Take the user input of the question and answer to the best of your abilities including adding links that users can click \n\n          3. If they are not in these categories OR they are out of the scope of what you can give users then say:\n          \"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \n          answering a different one? If not thank you for using our service!:D\" \n\n          4.  The output of your response should be first with a introductory paragraph of what you found. Then in a list format of \n          bullet points show all of the options, details, etc in terms of what you were trying to answer. You should list in detail their name, introduction, rating, qualifications\n          specialization with skills and subjects the tutor is good at, teaching approach, year if they are a current student or employee, reasonable pricing for a tutor, availability, contact phone number, \n          and social media. Then the final question where you ask the user specifically:\n          \"Do you need more help?\"\n\n          5. Following step 4 for the text \"Does this answer your question?\" If they say anything similar to the word \"Yes\" within context then say:\n          \"Hope this was helpful!\" If the user says \"No\", prompt the user by saying: \"Sure! What else do you want to know or need clarification about?\" Proceed\n          to then follow the previous steps starting from step 2. Use the question before as guidance and keep on topic. If they give an answer not on or similar to\n          said topic or within the category then say \"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \n          answering a different one? If not thank you for using our service!:D\"\n\n          6. For the first prompt, Please dont include any tutor's name or details. Just greet the user as mentioned above. \n\n          NOTE: if you can't find a given tutor name or certain info:\n\n          1. For no info at all make up a fake tutor with the guven info and make it similar to actual tutors you find.\n\n          2. If you do find real tutors but not find all pieces of information you can try your best to find it but else say:\n              - \"This is all the information I can find.\" This should be right before step 5 above.\n              - Also list the information as you do normally.\n              \n          Please make sure to format this response logically as how actual tutor websites online do it (may use internet to find how)\n          and list things in an order that is logical.\n\n          `;\n          break;\n        default:\n          prompt = \"I'm not sure what you're asking. Can you specify a bit more?\";\n          break;\n      }\n      window.location.href = `http://localhost:5173/?prompt=${encodeURIComponent(prompt)}`;\n    }\n\n    // document.getElementById('home-button').addEventListener('click', function () {\n    //   window.location.href = '/button_page/index.html';\n    // });\n    document.getElementById('home-button').addEventListener('click', function () {\n      showLoading();\n      setTimeout(() => {\n        navigateHome();\n      }, 1500);\n    });\n    function showLoading() {\n      document.getElementById('loading').style.display = 'flex';\n    }\n    function navigateHome() {\n      window.location.href = '/button_page/index.html';\n    }\n    function hideLoading() {\n      document.getElementById('loading').style.display = 'none';\n    }\n    function testFormatText() {\n      const sampleText = ` It sounds like you may be feeling a bit down today. It's important to take care of your mental health and well-being. Here are some resources available to you at Virginia Tech:\n  \n  - The Cook Counseling Center provides counseling and mental health services to students. You can schedule an appointment with a counselor to talk about how you're feeling and get support: [Cook Counseling Center](https://ucc.vt.edu/)\n  \n  - The VT Engage Mindfulness and Meditation resources offer guided meditation sessions and mindfulness practices that can help reduce stress and improve mental well-being: [VT Engage Mindfulness and Meditation](https://vtnews.vt.edu/notices/student-affairs-mindfulness-meditation)\n  \n  - The Experiential Learning & Health Hub offers resources and programs focused on well-being, stress management, and self-care. You can explore their workshops and events to find activities that may help lift your spirits: [Experiential Learning & Health Hub](https://students.vt.edu/student-health-division/experiential-learning-health-hub.html)\n  \n  - If you're looking for more ways to connect with others and build community, consider joining a student organization or club that aligns with your interests. Building connections and finding a sense of belonging can positively impact mental health: [Student Organizations at VT](https://gobblerconnect.vt.edu/organizations)\n  \n  Remember, it's okay to reach out for help and take steps to prioritize your mental well-being. Does this answer your question?`;\n      const formattedText = formatText(sampleText);\n      console.log(formattedText);\n    }\n    testFormatText();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chatPage,\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"loading\",\n        style: {\n          position: 'fixed',\n          width: '100%',\n          height: '100%',\n          top: 0,\n          left: 0,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          background: '#861F41',\n          zIndex: 1000\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: dalleBot,\n          id: styles.loadingImage,\n          alt: \"loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: styles.app,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: styles.header,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            id: styles.homeButton,\n            onClick: handleHomeClick,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: homeIcon,\n              alt: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 688,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 687,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            id: styles.chatHeader,\n            children: \"MindCraft VT Chatbot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: styles.categorySelector,\n            defaultValue: category,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"socialLife\",\n              children: \"Social Life\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"academia\",\n              children: \"Academia\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 693,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"wellness\",\n              children: \"Wellness\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 694,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"tutor\",\n              children: \"Tutor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 695,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 686,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: styles.chatContainer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            name: \"prompt\",\n            required: true,\n            rows: \"1\",\n            cols: \"1\",\n            placeholder: \"Ask MindCraft VT...\",\n            value: input,\n            onChange: e => setInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            id: styles.submitButton,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: sendButton,\n              alt: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 712,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 666,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatPage, \"UudA507E8KjHPLf0NbF3g2rAOC0=\", false, function () {\n  return [useParams, useLocation, useNavigate];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useNavigate","useParams","homePng","dalleBot","sendButton","styles","homeIcon","ChatPage","category","location","navigate","prompt","state","input","setInput","loadingElement","document","getElementById","setTimeout","style","display","handleHomeClick","handleSubmit","e","preventDefault","form","querySelector","chatContainer","quest","loadInterval","loader","element","textContent","setInterval","typeText","text","callback","index","interval","length","innerHTML","charAt","scrollTop","scrollHeight","clearInterval","chatbotMapping","getChatbotFromPrompt","urlPrompt","key","includes","addEventListener","urlParams","URLSearchParams","window","search","currentChatbot","String","console","log","selector","value","selectedIndex","data","FormData","prompt_url","get","reset","uniqueId","generateUniqueId","chatStripe","messageDiv","chatGPTResponse","InitialMessageToChatGPT","choices","replyText","message","content","error","toString","formatText","replace","timestamp","Date","now","randomNumber","Math","random","hexadecimalString","ai_bool","user","trim","sendMessageToChatGPT","messageHistory","push","role","toLowerCase","yesButton","createElement","className","noButton","buttonContainer","id","appendChild","documentElement","outerHTML","remove","responseDiv","emailButton","askMindcraftButton","emailPrompt","generateEmailPrompt","response","fetch","method","headers","body","JSON","stringify","model","messages","emailResponse","json","emailContent","subjectMatch","match","subject","mailtoLink","encodeURIComponent","href","askMindcraftMessageDiv","initialPrompt","categorySelector","setPromptForCategory","buttons","querySelectorAll","forEach","button","getAttribute","studentName","conversationHistory","map","join","showLoading","navigateHome","hideLoading","testFormatText","sampleText","formattedText","chatPage","position","width","height","top","left","justifyContent","alignItems","background","zIndex","loadingImage","app","header","homeButton","chatHeader","target","submitButton"],"sources":["/Users/roshanravindran/Downloads/MERN_Login_App_with_ResetEmail-Main/client/src/components/ChatPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport homePng from '../assets/home.png';\nimport dalleBot from '../assets/dalle_bot.jpg';\nimport sendButton from '../assets/send_button.png';\nimport styles from '../styles/ChatPage.module.css';\nimport homeIcon from '../assets/vt_student.jpg';\n\n\nconst ChatPage = () => {\n    const { category } = useParams();\n    const location = useLocation();\n    const navigate = useNavigate();\n    const { prompt } = location.state || {};\n    const [input, setInput] = useState('');\n  useEffect(() => {\n    const loadingElement = document.getElementById('loading');\n    setTimeout(() => {\n      if (loadingElement) loadingElement.style.display = 'none';\n    }, 1500);\n  }, []);\n  const handleHomeClick = () => {\n    navigate('/chatbot');\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const form = document.querySelector(\"form\");\nconst chatContainer = document.querySelector('.${styles.chatContainer}');\n\nvar quest = ` You are a counselor in the College of Engineering specifically in Computer Science at the real college called Virginia Polytechnic Institute and State University\nor Virginia Tech for short. You specialize in helping students by guiding and giving resources \nabout college work and classes and how to deal with them. \n\nYou will adhere to a consistent style of talking that is appropriate of a professional adult working a college job.\n\nYour task is to provide answers to student's question in the text given as such a counselor by:\n\n1. Start with a greeting to the system by saying:\"Hi! Welcome to Mindcraft VT Assistant! \n\n2. Then say \"Ask me any questions regarding these three topics:\"\n\n3. Answer the user's question in regards to three different categories. Do not display details of categories or info on them. Presume they have some form of idea.\nThis is for your knowledge only. Details below in these categories are to give you a better idea of what each category is specifically about.\nThese categories are:\n\n- Social Life: This is essentially about on going campus events at Virginia Tech, what you can do as a college student on campus in and out of\ncampus and outside in Blacksburg and nearby Christiansburg and Roanoke in Virginia. This also includes how to have fun with friends, groups, joining organizations\nand clubs, and doing all sorts of events and getting involved with extracurriculars. This includes stuff from Gobblerconnect, a website that hosts event listinngs and club/organization listings\nyou can join and in general calendars you can find by email like listserv notifications from organizations, and calendars embedded into the Virginia Tech college website\nand the calendar found on google or others found from related websites\n\n- Academics: This is essentially about courses, information on courses such as knowing what teacher is teaching or general heuristic knowledge about the class like \nwhat they teach and how long each class is. This also can be about how to sign up for such a class, the steps to sign up, prerequisites, among ther logistical knowledge\nthat is involved with courses. This can be about majors, pricing for credits, and anything related to classes, graduation, or a student's learning. This topic can also be\na way to guide students on how to survive classes in general and strategies to survive and thrive in classes. Important deadlines and there important heuristics that \nare constantly updates are listed here.\n\n- Wellness: This is essentially all about resources for students. They can be exisiting outside and inside campus resources. These resources include anything regarding \nmental health, physical health, disability services, food and dietary support, financial aid and support, housing information and costs of living, and anything in general\nthat regards useful everyday resources to help with the students needs that are listed currently on Virginia Tech on the websites and other affiliated resources. \n\nIf they are not in these categories OR they are out of the scope of what you can give users then say:\n\"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \nanswering a different one? If not thank you for using our service!:D\"\n\n4.  The output of your response should be first with a introductory paragraph of what your found. Then in a list format of \nbullet points show all of the options, details, etc in terms of what you were trying to answer, BUT do not do this for most prompts if \nit seems explicitly not needed. Instead if not needed, write in about 4-5 paragraphs explaining what you found. Finally have one final paragraph summarizing \nthe answer you found and then the final question where you ask the user specifically:\n\"Do you need more help?\"\n\n5. Following step 3 for the text \"Does this answer your question?\" If they say anything similar to the word \"Yes\" within context then say:\n\"Hope this was helpful!\" If the user says \"No\", prompt the user by saying: \"Sure! What else do you want to know or need clarification about?\" Proceed\nto then follow the previous steps starting from step 2. Use the question before as guidance and keep on topic. If they give an answer not on or similar to\nsaid topic or within the category then say \"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \nanswering a different one? If not thank you for using our service!:D`;\n\nlet loadInterval;\n\nfunction loader(element) {\n  element.textContent = \"\";\n\n  loadInterval = setInterval(() => {\n    element.textContent += \".\";\n    if (element.textContent === \"....\") {\n      element.textContent = \"\";\n    }\n  }, 300);\n}\n\nfunction typeText(element, text, callback) {\n  let index = 0;\n\n  let interval = setInterval(() => {\n    if (index < text.length) {\n      element.innerHTML += text.charAt(index);\n      chatContainer.scrollTop = chatContainer.scrollHeight;\n      ++index;\n    } else {\n      clearInterval(interval);\n      if (callback) callback();\n    }\n  }, 20);\n}\nconst chatbotMapping = {\n  'Social': 'socialLife',\n  'Academia': 'academia',\n  'Wellness': 'wellness',\n  'tutor': 'tutor'\n};\n\nfunction getChatbotFromPrompt(urlPrompt) {\n  for (const key in chatbotMapping) {\n    if (urlPrompt.includes(key)) {\n      return chatbotMapping[key];\n    }\n  }\n  return null;\n}\ndocument.addEventListener('DOMContentLoaded', async function () {\n  const urlParams = new URLSearchParams(window.location.search);\n\n\n\n  const currentChatbot = getChatbotFromPrompt(String(urlParams));\n  console.log(\"type of bot\" + currentChatbot);\n  const selector = document.getElementById('category-selector');\n  console.log(\"type of sekec\" + selector);\n\n  if (currentChatbot) {\n    console.log(\"ENTERED PLEASEE\" + currentChatbot);\n    selector.value = currentChatbot;\n    console.log(selector.value)\n  } else {\n    selector.selectedIndex = 0;\n  }\n\n\n\n  const data = new FormData(form);\n  const prompt_url = urlParams.get('prompt');\n  console.log(prompt_url);\n\n  quest = prompt_url;\n\n\n\n\n\n\n  // if (prompt === \"\") {\n  //   form.reset();\n  //   return;\n  // }\n  // user's chatstripe\n  // chatContainer.innerHTML += chatStripe(false, prompt);\n\n  form.reset();\n\n  // bot's chatstripe, initially blank\n  const uniqueId = generateUniqueId();\n  chatContainer.innerHTML += chatStripe(true, \" \", uniqueId);\n\n  chatContainer.scrollTop = chatContainer.scrollHeight;\n\n  const messageDiv = document.getElementById(uniqueId);\n  loader(messageDiv);\n\n\n  try {\n    const chatGPTResponse = await InitialMessageToChatGPT(quest);\n    clearInterval(loadInterval);\n    messageDiv.innerHTML = \"\";\n\n    if (chatGPTResponse.choices && chatGPTResponse.choices.length > 0) {\n      const replyText = chatGPTResponse.choices[0].message.content;\n      typeText(messageDiv, replyText);\n    } else {\n      messageDiv.innerHTML = \"Failed to get a response\";\n    }\n  } catch (error) {\n    clearInterval(loadInterval);\n    messageDiv.innerHTML = \"Error: \" + error.toString();\n    console.error(\"Error when calling OpenAI:\", error);\n  }\n\n\n});\nfunction formatText(text) {\n  // Replace markdown bold with HTML <strong> tag\n  text = text.replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>');\n\n  // Replace markdown links with HTML <a> tags\n  text = text.replace(/\\[([^\\]]+)\\]\\((http[^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\">$1</a>');\n\n  return text;\n}\n\nfunction generateUniqueId() {\n  const timestamp = Date.now();\n  const randomNumber = Math.random();\n  const hexadecimalString = randomNumber.toString(16);\n\n  return `id-${timestamp}-${hexadecimalString}`;\n}\n\nfunction chatStripe(ai_bool, value, uniqueId) {\n  return `\n    <div class=\"wrapper ${ai_bool && \"ai\"}\">\n      <div class=\"chat\">\n        <div class=\"profile\">\n          <img\n            src=\"${ai_bool ? dalleBot : user}\"\n            alt=\"${ai_bool ? \"bot\" : \"user\"}\"\n          />\n        </div>\n        <div class=\"message\" id=${uniqueId}>${value}</div>\n      </div>\n    </div>\n  `;\n}\n\nconst handleSubmit = async (e) => {\n  e.preventDefault();\n\n  const data = new FormData(form);\n  const prompt = data.get(\"prompt\").trim();\n\n  if (prompt === \"\") {\n    form.reset();\n    return;\n  }\n\n  // user's chatstripe\n  chatContainer.innerHTML += chatStripe(false, prompt);\n\n  form.reset();\n\n  const uniqueId = generateUniqueId();\n  chatContainer.innerHTML += chatStripe(true, \" \", uniqueId);\n\n  chatContainer.scrollTop = chatContainer.scrollHeight;\n\n  const messageDiv = document.getElementById(uniqueId);\n  loader(messageDiv);\n  try {\n    console.log('hii');\n    const chatGPTResponse = await sendMessageToChatGPT(prompt);\n\n    clearInterval(loadInterval);\n    messageDiv.innerHTML = \"\"; // Clear loader\n    if (chatGPTResponse.choices && chatGPTResponse.choices.length > 0) {\n      const replyText = chatGPTResponse.choices[0].message.content;\n      typeText(messageDiv, replyText, () => {\n      messageHistory.push({ role: \"assistant\", content: replyText });\n      console.log(replyText);\n      if (replyText.toLowerCase().includes(\"help\")) {\n        console.log(\"HI IM INNNNNN!!!!\")\n        const yesButton = document.createElement(\"button\");\n        yesButton.className = \"yes-button\";\n        yesButton.textContent = \"Yes\";\n        const noButton = document.createElement(\"button\");\n        noButton.className = \"no-button\";\n        noButton.textContent = \"No\";\n\n        const buttonContainer = document.createElement(\"div\");\n        buttonContainer.id = \"button-container\";\n        buttonContainer.appendChild(yesButton);\n        buttonContainer.appendChild(noButton);\n        chatContainer.appendChild(buttonContainer);\n\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n        console.log(\"HTML before clicking Yes button:\");\n        console.log(document.documentElement.outerHTML);\n\n        noButton.addEventListener(\"click\", () => {\n          chatContainer.innerHTML += chatStripe(false, \"No\", uniqueId);\n          chatContainer.innerHTML += chatStripe(true, \"Thank you! Please let me know if you have more questions.\", uniqueId);\n          // chatContainer.appendChild(responseDiv);\n          chatContainer.scrollTop = chatContainer.scrollHeight;\n          document.getElementById(\"button-container\").remove();\n          console.log(\"HTML AFTER clicking Yes button:\");\n          console.log(document.documentElement.outerHTML);\n        });\n\n        yesButton.addEventListener(\"click\", () => {\n          chatContainer.innerHTML += chatStripe(false, \"Yes\", uniqueId);\n          const responseDiv = document.createElement(\"div\");\n          responseDiv.id = \"bot-message\";\n          chatContainer.innerHTML += chatStripe(true, \"Would you like to email the advisor or continue the conversation?\", uniqueId);\n\n          const emailButton = document.createElement(\"button\");\n          emailButton.className = \"response-button\";\n          emailButton.textContent = \"Email Advisor\";\n          const askMindcraftButton = document.createElement(\"button\");\n          askMindcraftButton.className = \"response-button\";\n          askMindcraftButton.textContent = \"Continue Chat\";\n          document.getElementById(\"button-container\").remove();\n\n          responseDiv.appendChild(document.createElement(\"br\")); // Add line break\n          responseDiv.appendChild(emailButton);\n          responseDiv.appendChild(askMindcraftButton);\n\n          chatContainer.appendChild(responseDiv);\n          chatContainer.scrollTop = chatContainer.scrollHeight;\n          buttonContainer.remove();\n          emailButton.addEventListener(\"click\", async () => {\n            chatContainer.innerHTML += chatStripe(false, \"Yes, Please help me email my advisor\", uniqueId);\n\n            const emailPrompt = generateEmailPrompt(messageHistory);\n            // const emailResponse = await sendMessageToChatGPT(emailPrompt, []);\n            const response = await fetch('https://api.openai.com/v1/chat/completions', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': 'Bearer sk-proj-Ujro97vuIFi0BvhkpHnET3BlbkFJ2eiNRzcGGHMHfman9iiE'\n            },\n            body: JSON.stringify({\n              model: \"gpt-3.5-turbo\",\n              messages: [{role:\"user\", content:emailPrompt}]\n            })\n          });\n          const emailResponse = await response.json();\n          // if (data.choices && data.choices.length > 0) {\n          //   const emailContent = data.choices[0].message.content;\n          //   // messageHistory.push({ role: \"assistant\", content: replyText }); // Add bot reply to history\n          // }\n            const emailContent = await emailResponse.choices[0].message.content;\n\n\n            const subjectMatch = emailContent.match(/Subject: (.*)\\n/);\n            const subject = subjectMatch ? subjectMatch[1] : \"Inquiry\";\n            const body = emailContent.replace(/Subject: .*?\\n/, \"\");\n\n            const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n            window.location.href = mailtoLink;\n\n\n            document.getElementById(\"bot-message\").remove();\n            chatContainer.innerHTML += chatStripe(true, \"Hope I answered your question. Please let me know if you have more questions\", uniqueId);\n          });\n\n          askMindcraftButton.addEventListener(\"click\", () => {\n            const askMindcraftMessageDiv = document.createElement(\"div\");\n            chatContainer.innerHTML += chatStripe(false, \"Continue chat\", uniqueId);\n            askMindcraftMessageDiv.className = \"bot-message\";\n            chatContainer.innerHTML += chatStripe(true, \"Please provide more details or ask another question.\", uniqueId);\n            chatContainer.appendChild(askMindcraftMessageDiv);\n            chatContainer.scrollTop = chatContainer.scrollHeight;\n            document.getElementById(\"bot-message\").remove();\n          });\n        });\n      }\n    });\n    } else {\n      messageDiv.innerHTML = \"Failed to get a response\";\n    }\n  } catch (error) {\n    clearInterval(loadInterval);\n    messageDiv.innerHTML = \"Error: \" + error.toString();\n    console.error(\"Error when calling OpenAI:\", error);\n  }\n};\n\nform.addEventListener(\"submit\", handleSubmit);\n\nform.addEventListener(\"submit\", handleSubmit);\nform.addEventListener(\"keyup\", (e) => {\n  if (\"keyup\" === 13) {\n    handleSubmit(e);\n\n  }\n});\n\nasync function sendMessageToChatGPT(prompt) {\n  messageHistory.push({ role: \"user\", content: prompt });\n  const response = await fetch('https://api.openai.com/v1/chat/completions', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer sk-proj-Ujro97vuIFi0BvhkpHnET3BlbkFJ2eiNRzcGGHMHfman9iiE'\n    },\n    body: JSON.stringify({\n      model: \"gpt-3.5-turbo\",\n      messages: messageHistory\n    })\n  });\n  const data = await response.json();\n  if (data.choices && data.choices.length > 0) {\n    const replyText = data.choices[0].message.content;\n    messageHistory.push({ role: \"assistant\", content: replyText }); // Add bot reply to history\n  }\n  return data;\n}\nlet messageHistory = [];\nasync function InitialMessageToChatGPT(quest) {\n  chatContainer.innerHTML = '';\n  messageHistory = [];\n  const initialPrompt = quest;\n  messageHistory.push({ role: \"system\", content: initialPrompt });\n  console.log(messageHistory)\n  const response = await fetch('https://api.openai.com/v1/chat/completions', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer sk-proj-ClyheMv50nSvIf1Q3g84T3BlbkFJoZ6isdGyOQEQcCm8GlzN'\n    },\n    body: JSON.stringify({\n      model: \"gpt-3.5-turbo\",\n      messages: messageHistory\n    })\n  });\n  const data = await response.json();\n  if (data.choices && data.choices.length > 0) {\n    const replyText = data.choices[0].message.content;\n    const uniqueId = generateUniqueId();\n    chatContainer.innerHTML += chatStripe(true, replyText, uniqueId);\n    messageHistory.push({ role: \"assistant\", content: replyText });\n  } else {\n    console.error(\"Failed to get a valid response from the API.\");\n    chatContainer.innerHTML += `<div>Error: Failed to get a response from the assistant.</div>`;\n  }\n  return data;\n}\ndocument.addEventListener('DOMContentLoaded', function () {\n  const categorySelector = document.getElementById('category-selector');\n  categorySelector.addEventListener('change', function () {\n    console.log(\"AFTER \" + this.value);\n    if (this.value) {\n      setPromptForCategory(this.value);\n    }\n  });\n\n  const buttons = document.querySelectorAll('.button');\n  buttons.forEach(button => {\n    button.addEventListener('click', function () {\n      const category = this.getAttribute('id').replace('Btn', '');\n      setPromptForCategory(category);\n    });\n  });\n});\nconst studentName = \"Roshan Ravindran\"\n\nconst generateEmailPrompt = (conversationHistory) => {\n  return `\n    You are a helpful assistant. Based on the following conversation history, generate a detailed and polite email for a Virginia Tech advisor. The email should be written from the perspective of a Virginia Tech student asking for more information or assistance based on their enquiry.\n\n    Conversation History: ${conversationHistory.map(message => {\n      return `\\n${message.role === 'user' ? 'User' : 'Assistant'}: ${message.content}`;\n    }).join('')}\n\n    The name of the student is ${studentName}\n\n    Please ensure the email includes:\n    - A formal greeting.\n    - A clear and detailed description of the student's enquiry.\n    - Relevant details or context that the student has provided.\n    - A polite closing statement thanking the advisor for their time and asking for more detailed information or assistance.\n    - Keep it short and professional\n\n    The email should be structured formally and professionally, appropriate for a university setting.\n  `;\n};\n\nfunction setPromptForCategory(category) {\n  let prompt;\n  switch (category) {\n    case 'socialLife':\n      prompt = `You are a college life coordinator for the real college called Virginia Polytechnic Institute and State University\n          or Virginia Tech for short. Your job is to link resources and/or talk about activities you can do on campus in regards to social life.\n          Your are essentially pulling information about ongoing campus events at Virginia Tech, what you can do as a college student on campus in and out of\n          campus and outside in Blacksburg and nearby Christiansburg and Roanoke in Virginia. This also includes how to have fun with friends, groups, joining organizations\n          and clubs, and doing all sorts of events and getting involved with extracurriculars. This includes stuff from \n          Gobblerconnect, a website that hosts event listinngs and club/organization listings\n          you can join and in general calendars you can find by email like listserv notifications from organizations, and calendars embedded into the Virginia Tech college website\n          and the calendar found on google or others found from related websites\n          \n          You will adhere to a consistent style of talking that is appropriate of a professional adult working a college job.\n          \n          You also are able to access the Internet to get links. Make sure they are working links and will not result in a 404 error.\n          \n          Your task is to provide answers to student's question in the text given as a college life coordinator by:\n          \n          1. Start with a greeting to the user by saying:\"Hi! Welcome to Mindcraft VT Assistant! My name is Mindcraft VT Social Life Assistant! What is/are your question(s) for today?\n          \n          2. Take the user input of the question and answer to the best of your abilities including adding links that users can click \n          \n          3. If they are not in these categories OR they are out of the scope of what you can give users then say:\n          \"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \n          answering a different one? If not thank you for using our service!:D\" \n          \n          4.  The output of your response should be first with a introductory paragraph of what your found. Then in a list format of \n          bullet points show all of the options, details, etc in terms of what you were trying to answer, BUT do not do this for most prompts if \n          it seems explicitly not needed. Instead if not needed, write in about 4-5 paragraphs explaining what you found. Finally have one final paragraph summarizing \n          the answer you found and then the final question where you ask the user specifically:\n          \"Do you need more help?\"\n          \n          5. Following step 4 for the text \"Does this answer your question?\" If they say anything similar to the word \"Yes\" within context then say:\n          \"Hope this was helpful!\" If the user says \"No\", prompt the user by saying: \"Sure! What else do you want to know or need clarification about?\" Proceed\n          to then follow the previous steps starting from step 2. Use the question before as guidance and keep on topic. If they give an answer not on or similar to\n          said topic or within the category then say \"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \n          answering a different one? If not thank you for using our service!:D`;\n      break;\n    case 'academia':\n      prompt = `You are a academic advisor for the real college called Virginia Polytechnic Institute and State University\n          or Virginia Tech for short. Your information is all essentially about courses, information on courses such as knowing what teacher is teaching or general heuristic knowledge about the class like \n          what they teach and how long each class is. This also can be about how to sign up for such a class, the steps to sign up, prerequisites, among ther logistical knowledge\n          that is involved with courses. This can be about majors, pricing for credits, and anything related to classes, graduation, or a student's learning. This topic can also be\n          a way to guide students on how to survive classes in general and strategies to survive and thrive in classes. Important deadlines and there important heuristics that \n          are constantly updates are listed here.\n          \n          You will adhere to a consistent style of talking that is appropriate of a professional adult working a college job.\n          \n          You also are able to access the Internet to get links. Make sure they are working links and will not result in a 404 error.\n          \n          Your task is to provide answers to student's question in the text given as a academic advisor by:\n          \n          1. Start with a greeting to the user by saying:\"Hi! Welcome to Mindcraft VT Assistant! My name is Mindcraft VT Academia Assistant! What is/are your question(s) for today?\n          \n          2. Take the user input of the question and answer to the best of your abilities including adding links that users can click \n          \n          3. If they are not in these categories OR they are out of the scope of what you can give users then say:\n          \"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \n          answering a different one? If not thank you for using our service!:D\" \n          \n          4.  The output of your response should be first with a introductory paragraph of what your found. Then in a list format of \n          bullet points show all of the options, details, etc in terms of what you were trying to answer, BUT do not do this for most prompts if \n          it seems explicitly not needed. Instead if not needed, write in about 4-5 paragraphs explaining what you found. Finally have one final paragraph summarizing \n          the answer you found and then the final question where you ask the user specifically:\n          \"Do you need more help?\"\n          \n          5. Following step 4 for the text \"Does this answer your question?\" If they say anything similar to the word \"Yes\" within context then say:\n          \"Hope this was helpful!\" If the user says \"No\", prompt the user by saying: \"Sure! What else do you want to know or need clarification about?\" Proceed\n          to then follow the previous steps starting from step 2. Use the question before as guidance and keep on topic. If they give an answer not on or similar to\n          said topic or within the category then say \"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \n          answering a different one? If not thank you for using our service!:D`;\n      break;\n    case 'wellness':\n      prompt = `You are a embedded college counselor for the real college called Virginia Polytechnic Institute and State University\n          or Virginia Tech for short. Your information is all essentially about resources for students. They can be exisiting outside resources around Blacksburg, Christiansburg, and Roanoke and inside campus resources. These resources include anything regarding \n          mental health, physical health, disability services, food and dietary support, financial aid and support, housing information and costs of living, and anything in general\n          that regards useful everyday resources to help with the students needs that are listed currently on Virginia Tech on the websites and other affiliated resources. \n          \n          You will adhere to a consistent style of talking that is appropriate of a professional adult working a college job.\n          \n          You also are able to access the Internet to get links. Make sure they are working links and will not result in a 404 error.\n          \n          Your task is to provide answers to student's question in the text given as a embedded college counselor by:\n          \n          1. Start with a greeting to the user by saying:\"Hi! Welcome to Mindcraft VT Assistant! My name is Mindcraft VT Wellness Assistant! What is/are your question(s) for today?\n          \n          2. Take the user input of the question and answer to the best of your abilities including adding links that users can click \n          \n          3. If they are not in these categories OR they are out of the scope of what you can give users then say:\n          \"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \n          answering a different one? If not thank you for using our service!:D\" \n          \n          4.  The output of your response should be first with a introductory paragraph of what your found. Then in a list format of \n          bullet points show all of the options, details, etc in terms of what you were trying to answer, BUT do not do this for most prompts if \n          it seems explicitly not needed. Instead if not needed, write in about 4-5 paragraphs explaining what you found. Finally have one final paragraph summarizing \n          the answer you found and then the final question where you ask the user specifically:\n          \"Do you need more help?\"\n          \n          5. Following step 4 for the text \"Does this answer your question?\" If they say anything similar to the word \"Yes\" within context then say:\n          \"Hope this was helpful!\" If the user says \"No\", prompt the user by saying: \"Sure! What else do you want to know or need clarification about?\" Proceed\n          to then follow the previous steps starting from step 2. Use the question before as guidance and keep on topic. If they give an answer not on or similar to\n          said topic or within the category then say \"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \n          answering a different one? If not thank you for using our service!:D\n          `;\n      break;\n    case 'tutor':\n      prompt = `You lead and have a list of tutors for the real college called Virginia Polytechnic Institute and State University\n          or Virginia Tech for short. Your information is all essentially about giving information for students regarding listed tutors found. \n\n          You will adhere to a consistent style of talking that is appropriate of a professional adult working a college job.\n\n          You also are able to access the Internet to get links. Make sure they are working links and will not result in a 404 error.\n\n          Your task is to provide answers to student's question in the text given as an assitant that holds information regarding college tutorinng by:\n\n          1. Starting with a greeting to the user by saying:\"Hi! Welcome to Mindcraft VT Assistant! My name is Mindcraft VT Tutor Assistant! What is/are your question(s) for today?\n\n          2. Take the user input of the question and answer to the best of your abilities including adding links that users can click \n\n          3. If they are not in these categories OR they are out of the scope of what you can give users then say:\n          \"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \n          answering a different one? If not thank you for using our service!:D\" \n\n          4.  The output of your response should be first with a introductory paragraph of what you found. Then in a list format of \n          bullet points show all of the options, details, etc in terms of what you were trying to answer. You should list in detail their name, introduction, rating, qualifications\n          specialization with skills and subjects the tutor is good at, teaching approach, year if they are a current student or employee, reasonable pricing for a tutor, availability, contact phone number, \n          and social media. Then the final question where you ask the user specifically:\n          \"Do you need more help?\"\n\n          5. Following step 4 for the text \"Does this answer your question?\" If they say anything similar to the word \"Yes\" within context then say:\n          \"Hope this was helpful!\" If the user says \"No\", prompt the user by saying: \"Sure! What else do you want to know or need clarification about?\" Proceed\n          to then follow the previous steps starting from step 2. Use the question before as guidance and keep on topic. If they give an answer not on or similar to\n          said topic or within the category then say \"Sorry I don't believe I am able to answer your question in regards. Would you mind rewording your question or \n          answering a different one? If not thank you for using our service!:D\"\n\n          6. For the first prompt, Please dont include any tutor's name or details. Just greet the user as mentioned above. \n\n          NOTE: if you can't find a given tutor name or certain info:\n\n          1. For no info at all make up a fake tutor with the guven info and make it similar to actual tutors you find.\n\n          2. If you do find real tutors but not find all pieces of information you can try your best to find it but else say:\n              - \"This is all the information I can find.\" This should be right before step 5 above.\n              - Also list the information as you do normally.\n              \n          Please make sure to format this response logically as how actual tutor websites online do it (may use internet to find how)\n          and list things in an order that is logical.\n\n          `;\n      break;\n\n    default:\n      prompt = \"I'm not sure what you're asking. Can you specify a bit more?\";\n      break;\n  }\n  window.location.href = `http://localhost:5173/?prompt=${encodeURIComponent(prompt)}`;\n}\n\n// document.getElementById('home-button').addEventListener('click', function () {\n//   window.location.href = '/button_page/index.html';\n// });\ndocument.getElementById('home-button').addEventListener('click', function () {\n  showLoading();\n  setTimeout(() => {\n    navigateHome();\n  }, 1500);\n});\n\nfunction showLoading() {\n  document.getElementById('loading').style.display = 'flex';\n}\n\nfunction navigateHome() {\n  window.location.href = '/button_page/index.html';\n}\n\nfunction hideLoading() {\n  document.getElementById('loading').style.display = 'none';\n}\nfunction testFormatText() {\n  const sampleText = ` It sounds like you may be feeling a bit down today. It's important to take care of your mental health and well-being. Here are some resources available to you at Virginia Tech:\n  \n  - The Cook Counseling Center provides counseling and mental health services to students. You can schedule an appointment with a counselor to talk about how you're feeling and get support: [Cook Counseling Center](https://ucc.vt.edu/)\n  \n  - The VT Engage Mindfulness and Meditation resources offer guided meditation sessions and mindfulness practices that can help reduce stress and improve mental well-being: [VT Engage Mindfulness and Meditation](https://vtnews.vt.edu/notices/student-affairs-mindfulness-meditation)\n  \n  - The Experiential Learning & Health Hub offers resources and programs focused on well-being, stress management, and self-care. You can explore their workshops and events to find activities that may help lift your spirits: [Experiential Learning & Health Hub](https://students.vt.edu/student-health-division/experiential-learning-health-hub.html)\n  \n  - If you're looking for more ways to connect with others and build community, consider joining a student organization or club that aligns with your interests. Building connections and finding a sense of belonging can positively impact mental health: [Student Organizations at VT](https://gobblerconnect.vt.edu/organizations)\n  \n  Remember, it's okay to reach out for help and take steps to prioritize your mental well-being. Does this answer your question?`;\n  const formattedText = formatText(sampleText);\n  console.log(formattedText);\n}\n\ntestFormatText(); \n  };\n\n  return (\n    <div className={styles.chatPage}> {/* Apply the scoped class */}\n    <div>\n      <div\n        id=\"loading\"\n        style={{\n          position: 'fixed',\n          width: '100%',\n          height: '100%',\n          top: 0,\n          left: 0,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          background: '#861F41',\n          zIndex: 1000,\n        }}\n      >\n        <img src={dalleBot} id={styles.loadingImage} alt=\"loading\" />\n      </div>\n      <div id={styles.app}>\n        <div id={styles.header}>\n          <button id={styles.homeButton} onClick={handleHomeClick}>\n            <img src={homeIcon} alt=\"Home\" />\n          </button>\n          <h1 id={styles.chatHeader}>MindCraft VT Chatbot</h1>\n          <select id={styles.categorySelector} defaultValue={category}>\n            <option value=\"socialLife\">Social Life</option>\n            <option value=\"academia\">Academia</option>\n            <option value=\"wellness\">Wellness</option>\n            <option value=\"tutor\">Tutor</option>\n          </select>\n        </div>\n        <div id={styles.chatContainer}>\n          {/* Render chat messages here */}\n        </div>\n        <form onSubmit={handleSubmit}>\n          <textarea\n            name=\"prompt\"\n            required\n            rows=\"1\"\n            cols=\"1\"\n            placeholder=\"Ask MindCraft VT...\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n          ></textarea>\n          <button type=\"submit\" id={styles.submitButton}>\n            <img src={sendButton} alt=\"Send\" />\n          </button>\n        </form>\n      </div>\n    </div>\n    </div>\n  );\n};\n\nexport default ChatPage;\n"],"mappings":"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AAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,MAAMkI,WAAW,GAAG,kBAAkB;IAEtC,MAAM5B,mBAAmB,GAAI6B,mBAAmB,IAAK;MACnD,OAAQ;AACV;AACA;AACA,4BAA4BA,mBAAmB,CAACC,GAAG,CAACjE,OAAO,IAAI;QACzD,OAAQ,KAAIA,OAAO,CAACmB,IAAI,KAAK,MAAM,GAAG,MAAM,GAAG,WAAY,KAAInB,OAAO,CAACC,OAAQ,EAAC;MAClF,CAAC,CAAC,CAACiE,IAAI,CAAC,EAAE,CAAE;AAChB;AACA,iCAAiCH,WAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;IACH,CAAC;IAED,SAASN,oBAAoB,CAAC5H,QAAQ,EAAE;MACtC,IAAIG,MAAM;MACV,QAAQH,QAAQ;QACd,KAAK,YAAY;UACfG,MAAM,GAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E;UACzE;QACF,KAAK,UAAU;UACbA,MAAM,GAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E;UACzE;QACF,KAAK,UAAU;UACbA,MAAM,GAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;UACL;QACF,KAAK,OAAO;UACVA,MAAM,GAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}